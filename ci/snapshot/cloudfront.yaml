# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09

Parameters:

  S3BucketProofsName:
    Type: String
    Description: "S3 bucket will be AccountId-Region-S3BucketSuffix"

Resources:

  S3AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "S3 Bucket access identity"

  TheBucketPolicy2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketProofsName
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref S3BucketProofsName, "/*" ] ]
            Principal:
              CanonicalUser: !GetAtt S3AccessIdentity.S3CanonicalUserId


  LambdaEdgeFunctionSample:
      Type: AWS::Lambda::Function
      Properties:
        Role: !GetAtt LambdaEdgeFunctionRole.Arn
        Runtime: nodejs8.10
        Handler: index.handler
        Timeout: 5
#        AutoPublishAlias: live
        Code:
          ZipFile: !Sub |
            'use strict';
            exports.handler = (event, context, callback) => {
                //Get contents of response
                const response = event.Records[0].cf.response;
                const headers = response.headers;
            //Set new headers
             headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubdomains; preload'}];
             headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}];
             headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
             headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
             headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
             headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];
                //Return modified response
                callback(null, response);
            };
  IndexLambdaVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref LambdaEdgeFunctionSample
#      Nonce: !Ref Nonce

  # Custom resource for getting latest version of a lambda,
  # as required by CloudFront.

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()
          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event
            if (RequestType == 'Delete') return send(event, context, SUCCESS)
            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }
  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:PublishVersion
                Resource: '*'

  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3AccessIdentity
      - LambdaEdgeFunctionSample
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - DomainName: !Sub "${S3BucketProofsName}.s3.amazonaws.com"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref S3AccessIdentity ] ]
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-response
              LambdaFunctionARN: !GetAtt IndexLambdaVersion.FunctionArn
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true



  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"

Outputs:
  CloudFrontUrl:
    Value: !GetAtt 'WebsiteCloudfront.DomainName'
    Export:
      Name: CloudFrontUrl