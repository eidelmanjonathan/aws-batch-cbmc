#!/usr/bin/env python3

# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

import argparse
import json
import os
import textwrap
import requests

import botocore_amazon.monkeypatch
import boto3
import botocore

import stackst
import snapshott
import secretst

################################################################

def create_parser():
    arg = argparse.ArgumentParser(description="""
    Deploy the stacks as described by a snapshot.
    """)

    arg.add_argument('--profile',
                     metavar='NAME',
                     help='AWS account profile name'
                    )

    arg.add_argument('--profile-account-id',
                     metavar="ID",
                     help="AWS account ID if we need to give read permissions to build account")

    arg.add_argument('--build-profile',
                     metavar='NAME',
                     help='AWS build tools account profile name')

    arg.add_argument('--snapshot',
                     metavar='FILE',
                     help='Snapshot file to deploy from filesystem'
                    )
    arg.add_argument('--snapshotid',
                     metavar='ID',
                     help='Snapshot ID to deploy from S3'
                    )
    arg.add_argument('--doit',
                     action="store_true",
                     help='Force the creation or update of global stack'
                    )
    arg.add_argument('--globals',
                     action="store_true",
                     help='Deploy global stack'
                    )
    arg.add_argument('--build',
                     action="store_true",
                     help='Deploy build stacks'
                    )
    arg.add_argument('--prod',
                     action="store_true",
                     help='Deploy production stacks'
                    )
    arg.add_argument('--build-tools-s3',
                     metavar='NAME',
                     help='S3 bucket for build tools')
    return arg

################################################################

def get_value(name, stacks, snapshot, secrets):
    if name == 'GitHubToken':
        name = 'GitHubCommitStatusPAT'
    try:
        return (snapshot.get_param(name) or
                stacks.get_output(name) or
                secrets.get_secret_value(name)[1])
    # pylint: disable=bare-except
    # botocore.errorfactory.ResourceNotFoundException may be thrown here,
    # but the exception to catch is client.exception.ResourceNotFoundException
    # according to https://github.com/boto/boto3/issues/1195
    # This should probably be done inside snapshott, stackt, and secrett
    # But see also
    # https://stackoverflow.com/questions/42975609/how-to-capture-botocores-nosuchkey-exception
    except:
        return None

def make_parameters(keys, stacks, snapshot, secrets, s3_bucket_tools_name=None, proof_account_id=None):
    parameters = []
    for key in sorted(keys):
        if key=="S3BucketToolsName" and s3_bucket_tools_name:
            value = s3_bucket_tools_name
        elif key=="ProofAccountId" and proof_account_id:
            value = proof_account_id
        else:
            value = get_value(key, stacks, snapshot, secrets)
        if value is not None:
            parameters.append({"ParameterKey": key, "ParameterValue": value})
    return parameters

def print_parameters(parameters):
    for param in parameters:
        print("  {:20}: {}".format(param['ParameterKey'], param['ParameterValue']))

def deploy_stack_local(stack_name, template_name, parameter_keys,
                       stacks, snapshot, secrets, s3_bucket_name=None):
    stack_name = stack_name
    template_body = open(template_name).read()
    parameters = make_parameters(parameter_keys, stacks, snapshot, secrets, s3_bucket_tools_name=s3_bucket_name)
    capabilities = ['CAPABILITY_NAMED_IAM']

    try:
        if stacks.get_status(stack_name) is None:
            print("\nCreating stack '{}' with parameters".format(stack_name))
            print_parameters(parameters)
            print("Using " + template_name)
            stacks.get_client().create_stack(StackName=stack_name,
                                             TemplateBody=template_body,
                                             Parameters=parameters,
                                             Capabilities=capabilities)
        else:
            print("\nUpdating stack '{}' with parameters".format(stack_name))
            print_parameters(parameters)
            print("Using " + template_name)
            stacks.get_client().update_stack(StackName=stack_name,
                                             TemplateBody=template_body,
                                             Parameters=parameters,
                                             Capabilities=capabilities)
    except botocore.exceptions.ClientError as err:
        code = err.response['Error']['Code']
        msg = err.response['Error']['Message']
        if code == 'ValidationError' and msg == 'No updates are to be performed.':
            print("Nothing to update")
        else:
            raise

def deploy_stack_s3(stack_name, template_name, parameter_keys,
                    stacks, snapshot, secrets, s3_bucket_tools_name=None, proof_account_id=None):
    print("Deplopying stack s3: " + str(s3_bucket_tools_name))
    stack_name = stack_name
    s3_bucket_tools_name = s3_bucket_tools_name if s3_bucket_tools_name else stacks.get_output('S3BucketName')

    template_path = ("https://s3.amazonaws.com/{}/snapshot/snapshot-{}/{}"
                     .format(s3_bucket_tools_name,
                             snapshot.get_parameter('SnapshotID'),
                             template_name))
    parameters = make_parameters(parameter_keys, stacks, snapshot, secrets,
                                 s3_bucket_tools_name=s3_bucket_tools_name, proof_account_id=proof_account_id)
    capabilities = ['CAPABILITY_NAMED_IAM']

    try:
        if stacks.get_status(stack_name) is None:
            print("\nCreating stack '{}' with parameters".format(stack_name))
            print_parameters(parameters)
            print("Using {}".format(template_path))
            stacks.get_client().create_stack(StackName=stack_name,
                                             TemplateURL=template_path,
                                             Parameters=parameters,
                                             Capabilities=capabilities)
        else:
            print("\nUpdating stack '{}' with parameters".format(stack_name))
            print_parameters(parameters)
            print("Using {}".format(template_path))
            stacks.get_client().update_stack(StackName=stack_name,
                                             TemplateURL=template_path,
                                             Parameters=parameters,
                                             Capabilities=capabilities)
    except botocore.exceptions.ClientError as err:
        code = err.response['Error']['Code']
        msg = err.response['Error']['Message']
        if code == 'ValidationError' and msg == 'No updates are to be performed.':
            print("Nothing to update")
        else:
            raise

################################################################

def deploy_globals(stacks, snapshot, secrets, doit=None, local=False):

    if not doit:
        print()
        print(textwrap.wrap(textwrap.dedent("""
            Warning: You must move or delete the contents of the current
            bucket if you are changing the bucket.
            """)))
        print()
        print(textwrap.wrap(textwrap.dedent("""
            Warning: You must delete the PicaPica replication before
            changing the CodeCommit repositories or PicaPica replication
            role name.
            """)))
        print()
        print("Not creating or updating the globals stack.")
        print()
        return

    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('globals',
           "build-globals.yaml",
           ["GitHubRepository",
            "GitHubBranchName",
            "BatchRepositoryOwner",
            "BatchRepositoryName",
            "BatchRepositoryBranchName",
            "ViewerRepositoryOwner",
            "ViewerRepositoryName",
            "ViewerRepositoryBranchName",
            "S3BucketSuffix"],
           stacks, snapshot, secrets)

    print("Remember to set up the PicaPica replication.")

def deploy_build_batch(stacks, snapshot, secrets, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('build-batch',
           "build-batch.yaml",
           ['S3BucketName',
            'GitHubToken',
            'BatchRepositoryOwner',
            'BatchRepositoryName',
            'BatchRepositoryBranchName'],
           stacks, snapshot, secrets)

def deploy_build_viewer(stacks, snapshot, secrets, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('build-viewer',
           "build-viewer.yaml",
           ['S3BucketName',
            'GitHubToken',
            'ViewerRepositoryOwner',
            'ViewerRepositoryName',
            'ViewerRepositoryBranchName'],
           stacks, snapshot, secrets)

def deploy_build_docker(stacks, snapshot, secrets, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('build-docker',
           "build-docker.yaml",
           ['S3BucketName',
            'GitHubToken',
            'BatchRepositoryOwner',
            'BatchRepositoryName',
            'BatchRepositoryBranchName'],
           stacks, snapshot, secrets)

def deploy_build_cbmc_linux(stacks, snapshot, secrets, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('build-cbmc-linux',
           "build-cbmc-linux.yaml",
           ['S3BucketName',
            'GitHubToken',
            'CBMCBranchName'],
           stacks, snapshot, secrets)

def deploy_alarms_build(stacks, snapshot, secrets, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('alarms-build',
           "alarms-build.yaml",
           ['ProjectName',
            'SIMAddress',
            'NotificationAddress',
            'BuildBatchPipeline',
            'BuildViewerPipeline',
            'BuildDockerPipeline',
            'BuildCBMCLinuxPipeline'],
           stacks, snapshot, secrets)

def deploy_github(stacks, snapshot, secrets, build_tools_s3_bucket=None, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('github',
           "github.yaml",
           ['S3BucketToolsName',
            'ProjectName',
            'SnapshotID',
            'GitHubRepository',
            'GitHubBranchName'],
           stacks, snapshot, secrets, s3_bucket_tools_name=build_tools_s3_bucket)


def deploy_cbmc_batch(stacks, snapshot, secrets, build_tools_s3_bucket=None, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('cbmc-batch',
           "cbmc.yaml",
           ['ImageTagSuffix'],
           stacks, snapshot, secrets, s3_bucket_tools_name=build_tools_s3_bucket)

def deploy_alarms_prod(stacks, snapshot, secrets, build_tools_s3_bucket=None, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('alarms-prod',
           "alarms-prod.yaml",
           ['ProjectName',
            'SIMAddress',
            'NotificationAddress'],
           stacks, snapshot, secrets, s3_bucket_tools_name=build_tools_s3_bucket)

def deploy_canary(stacks, snapshot, secrets, build_tools_s3_bucket=None, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy('canary',
           "canary.yaml",
           ['GitHubRepository',
            'GitHubBranchName',
            'GitHubLambdaAPI'],
           stacks, snapshot, secrets, s3_bucket_tools_name=build_tools_s3_bucket)

def deploy_bucket_policy(stacks, snapshot, secrets, build_tools_s3_bucket=None, proof_account_id=None, local=False):
    deploy = deploy_stack_local if local else deploy_stack_s3
    deploy("bucket-policy",
           "bucket-policy.yaml",
           ["S3BucketToolsName", "ProofAccountId"],
           stacks, snapshot, secrets, s3_bucket_tools_name=build_tools_s3_bucket, proof_account_id=proof_account_id)
################################################################

def deploy_build_globals(stacks, snapshot, secrets, doit=None, local=False):
    stks = ['globals']
    if not stacks.stable_stacks(stks):
        print("Stacks not stable: {}".format(stks))
        return False

    deploy_globals(stacks, snapshot, secrets, doit, local)

    stacks.wait_for_stable_stacks(stks)
    if not stacks.successful_stacks(stks):
        print("Stacks not successful: {}".format(stks))
        return False

    return True

def deploy_global(stacks, snapshot, secrets, doit=None, local=False):
    if not deploy_build_globals(stacks, snapshot, secrets, doit, local):
        return False

    return True

################################################################

def deploy_build_tools(stacks, snapshot, secrets, local=False):
    stks = ['build-batch', 'build-viewer', 'build-docker', 'build-cbmc-linux']
    if not stacks.stable_stacks(stks):
        print("Stacks not stable: {}".format(stks))
        return False

    deploy_build_batch(stacks, snapshot, secrets, local)
    deploy_build_viewer(stacks, snapshot, secrets, local)
    deploy_build_docker(stacks, snapshot, secrets, local)
    deploy_build_cbmc_linux(stacks, snapshot, secrets, local)

    stacks.wait_for_stable_stacks(stks)
    if not stacks.successful_stacks(stks):
        print("Stacks not successful: {}".format(stks))
        return False

    return True

def deploy_build_alarms(stacks, snapshot, secrets, local=False):
    stks = ['alarms-build']
    if not stacks.stable_stacks(stks):
        print("Stacks not stable: {}".format(stks))
        return False

    deploy_alarms_build(stacks, snapshot, secrets, local)

    stacks.wait_for_stable_stacks(stks)
    if not stacks.successful_stacks(stks):
        print("Stacks not successful: {}".format(stks))
        return False

    return True

def deploy_build(stacks, snapshot, secrets, local=False):
    if not deploy_build_tools(stacks, snapshot, secrets, local):
        return False
    if not deploy_build_alarms(stacks, snapshot, secrets, local):
        return False
    return True

################################################################

def deploy_prod(stacks, snapshot, secrets, build_tools_s3_bucket, local=False):
    stks = ['github']
    if not stacks.stable_stacks(stks):
        print("Stacks not stable: {}".format(stks))
        return False

    deploy_github(stacks, snapshot, secrets, build_tools_s3_bucket, local)
    stacks.wait_for_stable_stacks(stks)
    if not stacks.successful_stacks(stks):
        print("Stacks not successful: {}".format(stks))
        return False

    stks = ['cbmc-batch', 'alarms-prod', 'canary']
    if not stacks.stable_stacks(stks):
        print("Stacks not stable: {}".format(stks))
        return False

    deploy_cbmc_batch(stacks, snapshot, secrets, build_tools_s3_bucket, local)
    deploy_alarms_prod(stacks, snapshot, secrets, build_tools_s3_bucket, local)
    deploy_canary(stacks, snapshot, secrets, build_tools_s3_bucket, local)

    stacks.wait_for_stable_stacks(stks)
    if not stacks.successful_stacks(stks):
        print("Stacks not successful: {}".format(stks))
        return False

    return True

################################################################

def chime_notification(user, snapshot_id, account_id, profile):
    webhook = ("https://hooks.chime.aws/incomingwebhooks/" +
               "f2aa90e6-f65a-4018-8fcd-bd0c732969c8?token=" +
               "bFJWODlEUkd8MXxFMmdqV2ZCeUFFZkJLQ2xPUFhqLTlOWk9HR" +
               "jJvYjd3YzcyWklGRmlPaU5F")
    headers = {"Content-type": "application/json"}
    data = {"Content":
            "@{} deployed snapshot {} in account {} ({})"
            .format(user, snapshot_id, account_id, profile)}
    requests.post(webhook, data=json.dumps(data), headers=headers)

def main():
    args = create_parser().parse_args()

    session = boto3.session.Session(profile_name=args.profile)
    stacks = stackst.Stacks(session)
    snapshot = None
    build_tools_bucket = None

    # If we are deploying a proof/prod account, we must get the snapshot from the shared build account
    if args.snapshotid and args.prod:
        build_session = boto3.session.Session(profile_name=args.build_profile)
        build_stacks = stackst.Stacks(build_session)
        snapshot_id = args.snapshotid
        snapshot_file = "snapshot-{}.json".format(snapshot_id)
        build_tools_bucket = build_stacks.get_output("S3BucketName")

        key = "snapshot/snapshot-{}/{}".format(snapshot_id, snapshot_file)
        print(build_tools_bucket, key, snapshot_file)
        build_session.client('s3').download_file(Bucket=build_tools_bucket, Key=key, Filename=snapshot_file)
        snapshot = snapshott.Snapshot(filename=snapshot_file)
        args.local = False
        if args.profile_account_id:
            build_secrets = secretst.Secrets(build_session)
            stks = ["bucket-policy"]
            if not build_stacks.stable_stacks(stks):
                print("Stacks not stable: {}".format(stks))
                return False
            deploy_bucket_policy(build_stacks, snapshot, build_secrets, build_tools_bucket,
                                 args.profile_account_id, args.local)

    # If we are setting up the build account itself, we only need to reference the build account
    elif args.snapshotid:
        snapshot_id = args.snapshotid
        snapshot_file = "snapshot-{}.json".format(snapshot_id)
        bucket = stacks.get_output("S3BucketName")
        key = "snapshot/snapshot-{}/{}".format(snapshot_id, snapshot_file)
        print(bucket, key, snapshot_file)
        session.client('s3').download_file(Bucket=bucket, Key=key, Filename=snapshot_file)
        snapshot = snapshott.Snapshot(filename=snapshot_file)
        args.local = False
    else:
        snapshot = snapshott.Snapshot(filename=args.snapshot)
        args.local = True
    secrets = secretst.Secrets(session)

    if args.globals:
        if not deploy_global(stacks, snapshot, secrets, args.doit, args.local):
            return False
    if args.build:
        if not deploy_build(stacks, snapshot, secrets, args.local):
            return False
    if args.prod:
        if not deploy_prod(stacks, snapshot, secrets, build_tools_bucket, args.local):
            return False



        # account_id = session.client('sts').get_caller_identity()['Account']
        # chime_notification(os.environ["USER"], args.snapshotid, account_id, args.profile)

    return True

if __name__ == "__main__":
    main()
