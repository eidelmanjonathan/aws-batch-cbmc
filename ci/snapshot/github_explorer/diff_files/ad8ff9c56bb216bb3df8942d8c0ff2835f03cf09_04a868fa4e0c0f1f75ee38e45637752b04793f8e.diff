diff --git a/demos/defender/aws_iot_demo_defender.c b/demos/defender/aws_iot_demo_defender.c
index 458f836c7..1c1418b07 100644
--- a/demos/defender/aws_iot_demo_defender.c
+++ b/demos/defender/aws_iot_demo_defender.c
@@ -65,14 +65,28 @@ static IotNetworkCredentials_t _AWS_IOT_CREDENTIALS = AWS_IOT_NETWORK_CREDENTIAL
     static Socket_t _createSocketToEchoServer();
 #endif
 
-static void _defenderTask( void * param );
+/**
+ * @brief Runs the defender demo.
+ *
+ * @return AWS_IOT_DEFENDER_SUCCESS on success, otherwise an error code indicating
+ *         the cause of error.
+ */
+static AwsIotDefenderError_t _defenderDemo( void );
+
+/**
+ * @brief Starts the defender agent.
+ *
+ * @return AWS_IOT_DEFENDER_SUCCESS on success, otherwise an error code indicating
+ *         the cause of error.
+ */
+static AwsIotDefenderError_t _startDefender( void );
 
-/* Callback used to get notification of defender's events. */
+/**
+ * @brief Callback used to get notification of defender's events.
+ */
 static void _defenderCallback( void * param1,
                                AwsIotDefenderCallbackInfo_t * const pCallbackInfo );
 
-static void _startDefender();
-
 /*-----------------------------------------------------------*/
 
 int vStartDefenderDemo( bool awsIotMqttMode,
@@ -81,8 +95,9 @@ int vStartDefenderDemo( bool awsIotMqttMode,
                         void * pNetworkCredentialInfo,
                         const IotNetworkInterface_t * pNetworkInterface )
 {
-    int status = EXIT_SUCCESS;
+    int status = EXIT_FAILURE;
     IotMqttError_t mqttInitStatus;
+    AwsIotDefenderError_t defenderResult;
 
     /* Unused parameters */
     ( void ) awsIotMqttMode;
@@ -94,14 +109,15 @@ int vStartDefenderDemo( bool awsIotMqttMode,
     /* Initialize the MQTT library. */
     mqttInitStatus = IotMqtt_Init();
 
-    if( mqttInitStatus != IOT_MQTT_SUCCESS )
+    if( mqttInitStatus == IOT_MQTT_SUCCESS )
     {
-        status = EXIT_FAILURE;
-    }
+        /* If the MQTT initialization was successful, run the demo. */
+        defenderResult = _defenderDemo();
 
-    if( status == EXIT_SUCCESS )
-    {
-        _defenderTask( NULL );
+        if( defenderResult == AWS_IOT_DEFENDER_SUCCESS )
+        {
+            status = EXIT_SUCCESS;
+        }
     }
 
     return status;
@@ -138,13 +154,12 @@ void _defenderCallback( void * param1,
 
 /*-----------------------------------------------------------*/
 
-static void _defenderTask( void * param )
+static AwsIotDefenderError_t _defenderDemo( void )
 {
-    ( void ) param;
-
     /* Expected remote IP of AWS IoT endpoint in defender metrics report. */
     uint32_t expectedIp = 0;
     char expectedIpBuffer[ 16 ] = "";
+    AwsIotDefenderError_t defenderResult;
 
     IotLogInfo( "----Device Defender Demo Start----.\r\n" );
 
@@ -154,27 +169,36 @@ static void _defenderTask( void * param )
     #endif
 
     /* Specify all metrics in "tcp connections" group */
-    AwsIotDefender_SetMetrics( AWS_IOT_DEFENDER_METRICS_TCP_CONNECTIONS,
-                               AWS_IOT_DEFENDER_METRICS_ALL );
+    defenderResult = AwsIotDefender_SetMetrics( AWS_IOT_DEFENDER_METRICS_TCP_CONNECTIONS,
+                                                AWS_IOT_DEFENDER_METRICS_ALL );
 
-    /* Set metrics report period to 5 minutes(300 seconds) */
-    AwsIotDefender_SetPeriod( 300 );
+    if( defenderResult == AWS_IOT_DEFENDER_SUCCESS )
+    {
+        /* Set metrics report period to 5 minutes(300 seconds) */
+        defenderResult = AwsIotDefender_SetPeriod( 300 );
+    }
 
-    /* Start the defender agent. */
-    _startDefender();
+    if( defenderResult == AWS_IOT_DEFENDER_SUCCESS )
+    {
+        /* Start the defender agent. */
+        defenderResult = _startDefender();
 
-    /* Query DNS for the IP. */
-    expectedIp = SOCKETS_GetHostByName( clientcredentialMQTT_BROKER_ENDPOINT );
+        if( defenderResult == AWS_IOT_DEFENDER_SUCCESS )
+        {
+            /* Query DNS for the IP. */
+            expectedIp = SOCKETS_GetHostByName( clientcredentialMQTT_BROKER_ENDPOINT );
 
-    /* Convert to string. */
-    SOCKETS_inet_ntoa( expectedIp, expectedIpBuffer );
-    IotLogInfo( "expected ip: %s", expectedIpBuffer );
+            /* Convert to string. */
+            SOCKETS_inet_ntoa( expectedIp, expectedIpBuffer );
+            IotLogInfo( "expected ip: %s", expectedIpBuffer );
 
-    /* Let it run for 3 seconds */
-    IotClock_SleepMs( 3000 );
+            /* Let it run for 3 seconds */
+            IotClock_SleepMs( 3000 );
 
-    /* Stop the defender agent. */
-    AwsIotDefender_Stop();
+            /* Stop the defender agent. */
+            AwsIotDefender_Stop();
+        }
+    }
 
     #if _DEMO_WITH_SOCKET_CONNECTED_TO_ECHO_SERVER == 1
         /* Clean up the socket. */
@@ -182,16 +206,17 @@ static void _defenderTask( void * param )
         SOCKETS_Close( socket );
     #endif
 
-    IotLogInfo( "----Device Defender Demo End----.\r\n" );
+    IotLogInfo( "----Device Defender Demo End. Status: %d----.\r\n", defenderResult );
 
-    vTaskDelete( NULL ); /* Delete this task. */
+    return defenderResult;
 }
 
 /*-----------------------------------------------------------*/
 
-static void _startDefender()
+static AwsIotDefenderError_t _startDefender( void )
 {
     const AwsIotDefenderCallback_t callback = { .function = _defenderCallback, .param1 = NULL };
+    AwsIotDefenderError_t defenderResult;
 
     AwsIotDefenderStartInfo_t startInfo = AWS_IOT_DEFENDER_START_INFO_INITIALIZER;
 
@@ -219,7 +244,9 @@ static void _startDefender()
     startInfo.callback = callback;
 
     /* Invoke defender start API. */
-    AwsIotDefender_Start( &startInfo );
+    defenderResult = AwsIotDefender_Start( &startInfo );
+
+    return defenderResult;
 }
 
 /*-----------------------------------------------------------*/
@@ -260,3 +287,5 @@ static void _startDefender()
     }
 
 #endif /* if _DEMO_WITH_SOCKET_CONNECTED_TO_ECHO_SERVER == 1 */
+
+/*-----------------------------------------------------------*/
diff --git a/demos/greengrass_connectivity/aws_greengrass_discovery_demo.c b/demos/greengrass_connectivity/aws_greengrass_discovery_demo.c
index 1ae1182d1..0c3a95c16 100644
--- a/demos/greengrass_connectivity/aws_greengrass_discovery_demo.c
+++ b/demos/greengrass_connectivity/aws_greengrass_discovery_demo.c
@@ -220,7 +220,6 @@ static void prvDiscoverGreenGrassCore( void * pvParameters )
     }
 
     configPRINTF( ( "----Demo finished----\r\n" ) );
-    vTaskDelete( NULL );
 }
 
 /*-----------------------------------------------------------*/
diff --git a/demos/https/CMakeLists.txt b/demos/https/CMakeLists.txt
index 19698e19a..f79d554eb 100644
--- a/demos/https/CMakeLists.txt
+++ b/demos/https/CMakeLists.txt
@@ -10,6 +10,8 @@ afr_module_sources(
     INTERFACE
         "${CMAKE_CURRENT_LIST_DIR}/iot_demo_https_s3_download_sync.c"
         "${CMAKE_CURRENT_LIST_DIR}/iot_demo_https_s3_download_async.c"
+        "${CMAKE_CURRENT_LIST_DIR}/iot_demo_https_s3_upload_sync.c"
+        "${CMAKE_CURRENT_LIST_DIR}/iot_demo_https_s3_upload_async.c"
         "${CMAKE_CURRENT_LIST_DIR}/iot_demo_https_common.c"
 )
 afr_module_dependencies(
diff --git a/demos/https/iot_demo_https_s3_download_async.c b/demos/https/iot_demo_https_s3_download_async.c
index 847a5689c..2d1a51a70 100644
--- a/demos/https/iot_demo_https_s3_download_async.c
+++ b/demos/https/iot_demo_https_s3_download_async.c
@@ -111,14 +111,14 @@
  * has been finished. It is finished when the responseCompleteCallback() is invoked. We create a pool of memory so that
  * all available requests in the pool can be scheduled right away without over-writing each other. */
 #ifndef IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS
-    #define IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS    ( 3 )
+    #define IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS    ( ( int ) 3 )
 #endif
 
 /* Size in bytes of the User Buffer used to store the internal connection context. The size presented here accounts for
  * storage of the internal connection context. The minimum size can be found in extern const unint32_t
  * connectionUserBufferMinimumSize. */
 #ifndef IOT_DEMO_HTTPS_CONN_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( 400 )
+    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( ( int ) 400 )
 #endif
 
 /* Size in bytes of the user buffer used to store the internal request context and HTTP request header lines.
@@ -129,7 +129,7 @@
  * in S3, but also the query following. The query following has the AWSAccessKeyId, the expiration time, and the
  * AWS Signature Version 4 signature.*/
 #ifndef IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( 512 )
+    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( ( int ) 512 )
 #endif
 
 /* Size in bytes of the user buffer used to store the internal response context and the HTTP response header lines.
@@ -138,13 +138,13 @@
  * Keep in mind that if the headers from the response do not all fit into this buffer, then the rest of the headers
  * will be discarded. The minimum size can be found in extern const uint32_t responseUserBufferMinimumSize. */
 #ifndef IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( 1024 )
+    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( ( int ) 1024 )
 #endif
 
 /* Size in bytes of the buffer used to store the response body (parts of it). This should be greater than or equal to
  * the size of the file we want to download.*/
 #ifndef IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE    ( 512 )
+    #define IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE    ( ( int ) 512 )
 #endif
 
 /* Timeout in milliseconds to wait for all asynchronous requests to finish. This timeout starts when the last
@@ -172,7 +172,7 @@
 /**
  * @brief The time for the application task to wait to try again finding a free request from the pool of requests.
  */
-#define GET_FREE_REQUEST_RETRY_WAIT_TIME_MS    ( 1000 )
+#define GET_FREE_REQUEST_RETRY_WAIT_TIME_MS    ( ( uint32_t ) 1000 )
 
 /*-----------------------------------------------------------*/
 
@@ -443,10 +443,16 @@ static void _responseCompleteCallback( void * pPrivData,
     /* Free up this request from the request pool. */
     _pInUseRequests[ pDownloadData->reqNum ] = false;
 
-    /* If in this response the total amount read does not equal the number of bytes we requested, then something went
-     * wrong. */
-    if( pDownloadData->currDownloaded != pDownloadData->numReqBytes )
+    /* If there is an error in the response processing. */
+    if( rc != IOT_HTTPS_OK )
     {
+        IotLogError( "There was a problem with the current response %d. Error code: %d. ", respHandle, rc );
+        IotSemaphore_Post( &( _fileFinishedSem ) );
+    }
+    else if( pDownloadData->currDownloaded != pDownloadData->numReqBytes )
+    {
+        /* If in this response the total amount read does not equal the number of bytes we requested, then something went
+         * wrong. */
         IotLogError( "There was a problem downloading the file. We downloaded %d. but wanted %d.",
                      pDownloadData->currDownloaded,
                      pDownloadData->numReqBytes );
@@ -519,13 +525,11 @@ static void _errorCallback( void * pPrivData,
 /**
  * @brief The function that runs the HTTPS Asynchronous demo.
  *
- * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server.
- *     This demo ignores this parameters.
- * @param[in] pIdentifier NULL-terminated MQTT client identifier. This demo ignores this parameter.
- * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo.
- *     This demo ignores this parameter.
- * @param[in] pNetworkCredentialInfo Contains credential Info for a TLS connection.
- * @param[in] pNetworkInterface Contains the network interface interaction routines.
+ * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server. This is ignored in this demo.
+ * @param[in] pIdentifier NULL-terminated MQTT client identifier. This is ignored in this demo.
+ * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo. This is ignored in this demo.
+ * @param[in] pNetworkCredentialInfo Contains credential info for a TLS connection.
+ * @param[in] pNetworkInterface Network interface to use for this demo.
  *
  * @return `EXIT_SUCCESS` if the demo completes successfully; `EXIT_FAILURE` otherwise.
  */
@@ -565,8 +569,8 @@ int RunHttpsAsyncDownloadDemo( bool awsIotMqttMode,
     uint32_t numReqBytes = 0;
     /* curByte indicates which starting byte we want to download next. */
     uint32_t curByte = 0;
-    /* The current index in the number of connection tries. */
-    uint32_t connIndex = 0;
+    /* The current attempt in the number of connection tries. */
+    uint32_t connAttempt = 0;
 
     /* Signal if the global semaphores were created for cleanup. */
     bool inUseRequestMutexCreated = false;
@@ -575,7 +579,7 @@ int RunHttpsAsyncDownloadDemo( bool awsIotMqttMode,
     IotLogInfo( "HTTPS Client Asynchronous S3 download demo using pre-signed URL: %s", IOT_DEMO_HTTPS_PRESIGNED_GET_URL );
 
     /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
-    httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_GET_URL, ( size_t ) strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ), &pPath, &pathLen );
+    httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_GET_URL, strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ), &pPath, &pathLen );
 
     if( httpsClientStatus != IOT_HTTPS_OK )
     {
@@ -588,7 +592,7 @@ int RunHttpsAsyncDownloadDemo( bool awsIotMqttMode,
     pathLen = strlen( pPath );
 
     /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
-    httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_GET_URL, ( size_t ) strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ), &pAddress, &addressLen );
+    httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_GET_URL, strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ), &pAddress, &addressLen );
 
     if( httpsClientStatus != IOT_HTTPS_OK )
     {
@@ -645,12 +649,12 @@ int RunHttpsAsyncDownloadDemo( bool awsIotMqttMode,
     }
 
     /* Connect to S3. */
-    for( connIndex = 1; connIndex <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connIndex++ )
+    for( connAttempt = 1; connAttempt <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connAttempt++ )
     {
         httpsClientStatus = IotHttpsClient_Connect( &connHandle, &connConfig );
 
         if( ( httpsClientStatus == IOT_HTTPS_CONNECTION_ERROR ) &&
-            ( connIndex < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
+            ( connAttempt < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
         {
             IotLogError( "Failed to connect to the S3 server, retrying after %d ms.",
                          IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
@@ -786,7 +790,16 @@ int RunHttpsAsyncDownloadDemo( bool awsIotMqttMode,
      * file to finish downloading, then we failed the demo. */
     if( IotSemaphore_TimedWait( &( _fileFinishedSem ), IOT_HTTPS_DEMO_ASYNC_TIMEOUT_MS ) == false )
     {
-        IotLogError( "Timed out waiting for the asynchronous request to complete." );
+        IotLogError( "Timed out waiting for the asynchronous requests to complete." );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* The file was downloaded successfully when the bytes downloaded is equal to the file size. */
+    if( _bytesFileDownloadedSoFar != _fileSize )
+    {
+        IotLogError( "The file was not fully downloaded. Bytes downloaded: %d/%d.",
+                     _bytesFileDownloadedSoFar,
+                     _fileSize );
         IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
     }
 
diff --git a/demos/https/iot_demo_https_s3_download_sync.c b/demos/https/iot_demo_https_s3_download_sync.c
index aaff42019..ab623ecb7 100644
--- a/demos/https/iot_demo_https_s3_download_sync.c
+++ b/demos/https/iot_demo_https_s3_download_sync.c
@@ -25,7 +25,8 @@
 
 /**
  * @file iot_demo_https_s3_download_sync.c
- * @brief Demonstrates synchronous usage of the HTTPS library by performing partial content GET requests on a file from S3.
+ * @brief Demonstrates synchronous usage of the HTTPS library by performing partial content GET requests on a file from
+ * S3.
  */
 
 /* The config header is always included first. */
@@ -107,14 +108,14 @@
 /* Size in bytes of the User Buffer used to store the internal connection context. The size presented here accounts for
  * storage of the internal connection context. The minimum size can be found in extern const unint32_t connectionUserBufferMinimumSize. */
 #ifndef IOT_DEMO_HTTPS_CONN_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( 512 )
+    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( ( int ) 512 )
 #endif
 
 /* Size in bytes of the user buffer used to store the internal request context and HTTP request header lines.
  * The size presented here accounts for the storeage of the internal context, the first request line in the HTTP
  * formatted header and extra headers. The minimum size can be found in extern const uint32_t requestUserBufferMinimumSize. */
 #ifndef IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( 512 )
+    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( ( int ) 512 )
 #endif
 
 /* Size in bytes of the user buffer used to store the internal response context and the HTTP response header lines.
@@ -123,13 +124,13 @@
  * Keep in mind that if the headers from the response do not all fit into this buffer, then the rest of the headers
  * will be discarded. The minimum size can be found in extern const uint32_t responseUserBufferMinimumSize. */
 #ifndef IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( 1024 )
+    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( ( int ) 1024 )
 #endif
 
 /* Size in bytes of the buffer used to store the response body (parts of it). This should be greater than or equal to
  * the size of the file we want to download.*/
 #ifndef IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE
-    #define IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE    ( 512 )
+    #define IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE    ( ( int ) 512 )
 #endif
 
 /* Time to wait in milliseconds before retrying the HTTPS Connection. A connection is only attempted again if
@@ -146,6 +147,13 @@
     #define IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY    ( ( uint32_t ) 3 )
 #endif
 
+/* The timeout in milliseconds to wait on IotHttpsClient_SendSync(). This timeout is how long the routine will block
+ * for waiting for an HTTP response. It is possible that the server could close the connection after receiving a
+ * request, so never sending the response. */
+#ifndef IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS
+    #define IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS    ( ( uint32_t ) 60000 )
+#endif
+
 /** @endcond */
 
 /*-----------------------------------------------------------*/
@@ -170,6 +178,8 @@ static uint8_t _pRespUserBuffer[ IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE ] = { 0 };
  */
 static uint8_t _pRespBodyBuffer[ IOT_DEMO_HTTPS_RESP_BODY_BUFFER_SIZE ] = { 0 };
 
+/*-----------------------------------------------------------*/
+
 /* Declaration of demo function. */
 int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
                               const char * pIdentifier,
@@ -182,13 +192,11 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
 /**
  * @brief The function that runs the HTTPS Synchronous Download demo.
  *
- * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server.
- *     This demo ignores this parameters.
- * @param[in] pIdentifier NULL-terminated MQTT client identifier. This demo ignores this parameter.
- * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo.
- *     This demo ignores this parameter.
+ * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server. This is ignored in this demo.
+ * @param[in] pIdentifier NULL-terminated MQTT client identifier. This is ignored in this demo.
+ * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo. This is ignored in this demo.
  * @param[in] pNetworkCredentialInfo Contains credential Info for a TLS connection.
- * @param[in] pNetworkInterface Contains the network interface interaction routines.
+ * @param[in] pNetworkInterface Network interface to use for this demo.
  *
  * @return `EXIT_SUCCESS` if the demo completes successfully; `EXIT_FAILURE` otherwise.
  */
@@ -251,14 +259,14 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
     uint32_t curByte = 0;
     /* Buffer to write the Range: header value string. */
     char rangeValueStr[ RANGE_VALUE_MAX_LENGTH ] = { 0 };
-    /* The current index in the number of connection tries. */
-    uint32_t connIndex = 0;
+    /* The current attempt in the number of connection tries. */
+    uint32_t connAttempt = 0;
 
     IotLogInfo( "HTTPS Client Synchronous S3 download demo using pre-signed URL: %s", IOT_DEMO_HTTPS_PRESIGNED_GET_URL );
 
     /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
     httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
-                                                   ( size_t ) strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                   strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
                                                    &pPath,
                                                    &pathLen );
 
@@ -272,7 +280,7 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
 
     /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
     httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
-                                                      ( size_t ) strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                      strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
                                                       &pAddress,
                                                       &addressLen );
 
@@ -339,12 +347,12 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
     }
 
     /* Connect to S3. */
-    for( connIndex = 1; connIndex <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connIndex++ )
+    for( connAttempt = 1; connAttempt <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connAttempt++ )
     {
         httpsClientStatus = IotHttpsClient_Connect( &connHandle, &connConfig );
 
         if( ( httpsClientStatus == IOT_HTTPS_CONNECTION_ERROR ) &&
-            ( connIndex < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
+            ( connAttempt < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
         {
             IotLogError( "Failed to connect to the S3 server, retrying after %d ms.",
                          IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
@@ -365,7 +373,7 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
 
     /* Get the size of the file specified in the S3 presigned URL. */
 
-    /* Verify the file was uploaded by retrieving the file size. */
+    /* Verify the file exists by retrieving the file size. */
     if( _IotHttpsDemo_GetS3ObjectFileSize( &fileSize,
                                            connHandle,
                                            pPath,
@@ -452,7 +460,7 @@ int RunHttpsSyncDownloadDemo( bool awsIotMqttMode,
                 IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
             }
 
-            httpsClientStatus = IotHttpsClient_SendSync( connHandle, reqHandle, &respHandle, &respConfig, 0 );
+            httpsClientStatus = IotHttpsClient_SendSync( connHandle, reqHandle, &respHandle, &respConfig, IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS );
 
             if( httpsClientStatus != IOT_HTTPS_OK )
             {
diff --git a/demos/https/iot_demo_https_s3_upload_async.c b/demos/https/iot_demo_https_s3_upload_async.c
new file mode 100644
index 000000000..5aed01a6b
--- /dev/null
+++ b/demos/https/iot_demo_https_s3_upload_async.c
@@ -0,0 +1,539 @@
+/*
+ * Amazon FreeRTOS V201906.00 Major
+ * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in
+ * the Software without restriction, including without limitation the rights to
+ * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+ * the Software, and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * http://aws.amazon.com/freertos
+ * http://www.FreeRTOS.org
+ */
+
+/**
+ * @file iot_demo_https_s3_upload_async.c
+ * @brief Demonstrates asynchronous usage of the HTTPS library by performing a PUT requests on a file to S3.
+ */
+
+/* The config header is always included first. */
+#include "iot_config.h"
+
+/* C Standard includes. */
+#include <stdbool.h>
+#include <string.h>
+
+/* Set up logging for this demo. */
+#include "iot_demo_logging.h"
+
+/* Amazon FreeRTOS includes. */
+#include "iot_demo_https_common.h"
+#include "iot_https_utils.h"
+#include "aws_demo_config.h"
+#include "platform/iot_network.h"
+#include "platform/iot_threads.h"
+#include "private/iot_error.h"
+#include "platform/iot_clock.h"
+
+/**
+ * This demonstrates uploading a file to S3 using a pre-signed URL using the Amazon FreeRTOS HTTP Client library.
+ * The HTTPS Client library is a generic HTTP/1.1 client library that be used to upload files to other webservers as
+ * well.
+ *
+ * A presigned URL is required to run this demo. Please see the demos/https/README.md for instructions on how to
+ * generate one.
+ */
+
+/**
+ * @cond DOXYGEN_IGNORE
+ * Doxygen should ignore this section.
+ *
+ * Provide default values for undefined configuration settings.
+ */
+
+/* Presigned URL for S3 PUT Object access. A GET URL is defined to verify the demo.*/
+#ifndef IOT_DEMO_HTTPS_PRESIGNED_PUT_URL
+    #define IOT_DEMO_HTTPS_PRESIGNED_PUT_URL    "Please configure a presigned PUT URL in iot_config.h."
+#endif
+
+/* TLS port for HTTPS. */
+#ifndef IOT_DEMO_HTTPS_PORT
+    #define IOT_DEMO_HTTPS_PORT    ( ( uint16_t ) 443 )
+#endif
+
+#ifndef IOT_DEMO_HTTPS_TRUSTED_ROOT_CA
+    /* This the Baltimore Cybertrust root CA associated with the S3 server certificate. */
+    #define IOT_DEMO_HTTPS_TRUSTED_ROOT_CA                               \
+    "-----BEGIN CERTIFICATE-----\n"                                      \
+    "MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ\n" \
+    "RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD\n" \
+    "VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX\n" \
+    "DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y\n" \
+    "ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy\n" \
+    "VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr\n" \
+    "mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr\n" \
+    "IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK\n" \
+    "mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu\n" \
+    "XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy\n" \
+    "dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye\n" \
+    "jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1\n" \
+    "BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\n" \
+    "DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92\n" \
+    "9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx\n" \
+    "jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0\n" \
+    "Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz\n" \
+    "ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS\n" \
+    "R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp\n"                             \
+    "-----END CERTIFICATE-----\n"
+#endif /* ifndef IOT_DEMO_HTTPS_TRUSTED_ROOT_CA */
+
+/* Size in bytes of the User Buffer used to store the internal connection context. The size presented here accounts for
+ * storage of the internal connection context. The minimum size can be found in extern const unint32_t
+ * connectionUserBufferMinimumSize. */
+#ifndef IOT_DEMO_HTTPS_CONN_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( ( int ) 512 )
+#endif
+
+/* Size in bytes of the user buffer used to store the internal request context and HTTP request header lines.
+ * The size presented here accounts for the storage of the internal context, the first request line in the HTTP
+ * formatted header and extra headers. The minimum size can be found in extern const uint32_t
+ * requestUserBufferMinimumSize. Keep in mind that this requestUserBufferMinimumSize does not include the size of the
+ * path in the request line. The path could be well over 100 characters long as it includes not only the object key name
+ * in S3, but also the query following. The query following has the AWSAccessKeyId, the expiration time, and the
+ * AWS Signature Version 4 signature.*/
+#ifndef IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( ( int ) 512 )
+#endif
+
+/* Size in bytes of the user buffer used to store the internal response context and the HTTP response header lines.
+ * The size presented here accounts for the storage of the internal context, the first request line in the HTTP
+ * formatted header and extra headers. The minimum can be found in responseUserBufferMinimumSize.
+ * Keep in mind that if the headers from the response do not all fit into this buffer, then the rest of the headers
+ * will be discarded. The minimum size can be found in extern const uint32_t responseUserBufferMinimumSize. */
+#ifndef IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( ( int ) 1024 )
+#endif
+
+/* Pointer to the data to upload.*/
+#ifndef IOT_DEMO_HTTPS_UPLOAD_DATA
+    #define IOT_DEMO_HTTPS_UPLOAD_DATA    "Hello World!"
+#endif
+
+/* The size of the data in bytes to upload. */
+#ifndef IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE
+    #define IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE    ( sizeof( IOT_DEMO_HTTPS_UPLOAD_DATA ) - 1 )
+#endif
+
+/* Time to wait in milliseconds before retrying the HTTPS Connection. A connection is only attempted again if
+ * IOT_HTTPS_CONNECTION_ERROR is returned from IotHttpsClient_Connect(). This indicates an error in the network
+ * layer. To view logging for network errors update IOT_LOG_LEVEL_NETWORK to IOT_LOG_ERROR in iot_config.h */
+#ifndef IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS
+    #define IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS    ( ( uint32_t ) 3000 )
+#endif
+
+/* Number of times to retry the HTTPS connection. A connection is only attempted again if
+ * IOT_HTTPS_CONNECTION_ERROR is returned from IotHttpsClient_Connect(). This indicates an error in the network
+ * layer. To view logging for network errors update IOT_LOG_LEVEL_NETWORK to IOT_LOG_ERROR in iot_config.h */
+#ifndef IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY
+    #define IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY    ( ( uint32_t ) 3 )
+#endif
+
+/* Timeout in milliseconds to wait for the asynchronous request to finish. This timeout starts when the last
+ * IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS sent has been scheduled. */
+#ifndef IOT_HTTPS_DEMO_ASYNC_TIMEOUT_MS
+    #define IOT_HTTPS_DEMO_ASYNC_TIMEOUT_MS    ( ( uint32_t ) 300000 )   /* 5 minute timeout for this demo. */
+#endif
+
+/** @endcond */
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Buffer used to store the internal connection context.
+ */
+static uint8_t _pConnUserBuffer[ IOT_DEMO_HTTPS_CONN_BUFFER_SIZE ] = { 0 };
+
+/**
+ * @brief Buffer used to store the request context and the HTTP request header lines.
+ */
+static uint8_t _pReqUserBuffer[ IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE ] = { 0 };
+
+/**
+ * @brief Buffer used to store the response context and the HTTP response header lines.
+ */
+static uint8_t _pRespUserBuffer[ IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE ] = { 0 };
+
+/*-----------------------------------------------------------*/
+
+/* Declaration of demo function. */
+int RunHttpsAsyncUploadDemo( bool awsIotMqttMode,
+                             const char * pIdentifier,
+                             void * pNetworkServerInfo,
+                             void * pNetworkCredentialInfo,
+                             const IotNetworkInterface_t * pNetworkInterface );
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Semaphore use to signal that the demo is finished.
+ *
+ * The upload is completely finished when the response is fully received with a 200 HTTP response status.
+ */
+static IotSemaphore_t _uploadFinishedSem = { 0 };
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Callback for an asynchronous request to write data to the network.
+ *
+ * @param[in] pPrivData - User private data configured with the HTTPS Client library request configuration.
+ * @param[in] reqHandle - Identifier for the current request in progress.
+ */
+static void _writeCallback( void * pPrivData,
+                            IotHttpsRequestHandle_t reqHandle )
+{
+    IotHttpsReturnCode_t writeStatus = IOT_HTTPS_OK;
+    bool * pUploadSuccess = ( bool * ) pPrivData;
+
+    /* Write the upload data to the network. isComplete the last parameter must always be set to 1. */
+    writeStatus = IotHttpsClient_WriteRequestBody( reqHandle,
+                                                   ( uint8_t * ) IOT_DEMO_HTTPS_UPLOAD_DATA,
+                                                   IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE,
+                                                   1 );
+
+    if( writeStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "Error writing the request body to the network. Return code %d.", writeStatus );
+        *pUploadSuccess = false;
+        IotHttpsClient_CancelRequestAsync( reqHandle );
+    }
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Callback for an asynchronous request to notify that the response is complete.
+ *
+ * @param[in] pPrivData - User private data configured with the HTTPS Client library request configuration.
+ * @param[in] respHandle - Identifier for the current response finished.
+ * @param[in] rc - Return code from the HTTPS Client Library signaling a possible error.
+ * @param[in] status - The HTTP response status.
+ */
+static void _responseCompleteCallback( void * pPrivData,
+                                       IotHttpsResponseHandle_t respHandle,
+                                       IotHttpsReturnCode_t rc,
+                                       uint16_t status )
+{
+    bool * pUploadSuccess = ( bool * ) pPrivData;
+
+    /* When the remote server response with 200 OK, the file was successfully uploaded. */
+    if( status == IOT_HTTPS_STATUS_OK )
+    {
+        *pUploadSuccess = true;
+    }
+    else
+    {
+        *pUploadSuccess = false;
+    }
+
+    /* Post to the semaphore that the upload is finished. */
+    IotSemaphore_Post( &( _uploadFinishedSem ) );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief The function that runs the HTTPS Asynchronous Upload demo.
+ *
+ * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server. This is ignored in this demo.
+ * @param[in] pIdentifier NULL-terminated MQTT client identifier. This is ignored in this demo.
+ * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo. This is ignored in this demo.
+ * @param[in] pNetworkCredentialInfo Contains credential info for a TLS connection.
+ * @param[in] pNetworkInterface Network interface to use for this demo.
+ *
+ * @return `EXIT_SUCCESS` if the demo completes successfully; `EXIT_FAILURE` otherwise.
+ */
+int RunHttpsAsyncUploadDemo( bool awsIotMqttMode,
+                             const char * pIdentifier,
+                             void * pNetworkServerInfo,
+                             void * pNetworkCredentialInfo,
+                             const IotNetworkInterface_t * pNetworkInterface )
+{
+    IOT_FUNCTION_ENTRY( int, EXIT_SUCCESS );
+
+    /* Unused parameters. */
+    ( void ) awsIotMqttMode;
+    ( void ) pIdentifier;
+    ( void ) pNetworkServerInfo;
+
+    /* HTTPS Client library return status. */
+    IotHttpsReturnCode_t httpsClientStatus = IOT_HTTPS_OK;
+
+    /* Configurations for the HTTPS connection. */
+    IotHttpsConnectionInfo_t connConfig = { 0 };
+    /* Handle identifying the HTTPS connection. */
+    IotHttpsConnectionHandle_t connHandle = IOT_HTTPS_CONNECTION_HANDLE_INITIALIZER;
+    /* Configurations for the HTTPS request. */
+    IotHttpsRequestInfo_t reqConfig = { 0 };
+    /* Configurations for the HTTPS response. */
+    IotHttpsResponseInfo_t respConfig = { 0 };
+
+    /* Handle identifying the HTTP request. This is valid after the request has been initialized with
+     * IotHttpsClient_InitializeRequest(). */
+    IotHttpsRequestHandle_t reqHandle = IOT_HTTPS_REQUEST_HANDLE_INITIALIZER;
+    /* Handle identifying the HTTP response. This handle is used only in the asynchronous callback. */
+    IotHttpsResponseHandle_t respHandle = IOT_HTTPS_RESPONSE_HANDLE_INITIALIZER;
+
+    /* Asynchronous request specific configurations. */
+    IotHttpsAsyncInfo_t asyncInfo = { 0 };
+
+    /* Signal if the global upload finished semaphore was created for cleanup. */
+    bool uploadFinishedSemCreated = false;
+
+    /* The location of the path within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    const char * pPath = NULL;
+    /* The length of the path within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    size_t pathLen = 0;
+    /* The location of the address within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    const char * pAddress = NULL;
+    /* The length of the address within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    size_t addressLen = 0;
+    /* The current attempt in the number of connection tries. */
+    uint32_t connAttempt = 0;
+    /* Context into the asynchronous callback to denote a success or failure back to the application. */
+    bool uploadSuccess = true;
+
+    IotLogInfo( "HTTPS Client Asynchronous S3 upload demo using pre-signed URL: %s", IOT_DEMO_HTTPS_PRESIGNED_PUT_URL );
+
+    /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                                                   strlen( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL ),
+                                                   &pPath,
+                                                   &pathLen );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_GetUrlPath() on URL %s. Error code: %d",
+                     IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                     httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                                                      strlen( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL ),
+                                                      &pAddress,
+                                                      &addressLen );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_GetUrlAddress() on URL %s\r\n. Error code %d",
+                     IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                     httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Set the connection configurations. */
+    connConfig.pAddress = pAddress;
+    connConfig.addressLen = addressLen;
+    connConfig.port = IOT_DEMO_HTTPS_PORT;
+    connConfig.pCaCert = IOT_DEMO_HTTPS_TRUSTED_ROOT_CA;
+    connConfig.caCertLen = sizeof( IOT_DEMO_HTTPS_TRUSTED_ROOT_CA );
+    connConfig.userBuffer.pBuffer = _pConnUserBuffer;
+    connConfig.userBuffer.bufferLen = sizeof( _pConnUserBuffer );
+    connConfig.pClientCert = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->pClientCert;
+    connConfig.clientCertLen = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->clientCertSize;
+    connConfig.pPrivateKey = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->pPrivateKey;
+    connConfig.privateKeyLen = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->privateKeySize;
+    connConfig.pNetworkInterface = pNetworkInterface;
+
+    asyncInfo.callbacks.writeCallback = _writeCallback;
+    asyncInfo.callbacks.responseCompleteCallback = _responseCompleteCallback;
+    asyncInfo.pPrivData = &uploadSuccess;
+
+    /* The path is everything that is not the address. It also includes the query. So we get the strlen( pPath ) to
+     * acquire everything following in IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    reqConfig.pPath = pPath;
+    reqConfig.pathLen = strlen( pPath );
+    reqConfig.pHost = pAddress;
+    reqConfig.hostLen = addressLen;
+
+    /* The PUT method is used to upload an object to S3 because it is simpler than using POST. POST requires AWS S3
+     * access specific header fields in the body of the message in a multipart/form-data encoded message. See
+     * https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPOST.html for more information about POST object. See
+     * https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html for more information about PUT object. */
+    reqConfig.method = IOT_HTTPS_METHOD_PUT;
+    reqConfig.isNonPersistent = false;
+    reqConfig.userBuffer.pBuffer = _pReqUserBuffer;
+    reqConfig.userBuffer.bufferLen = sizeof( _pReqUserBuffer );
+    reqConfig.isAsync = true;
+    reqConfig.u.pAsyncInfo = &asyncInfo;
+
+    respConfig.userBuffer.pBuffer = _pRespUserBuffer;
+    respConfig.userBuffer.bufferLen = sizeof( _pRespUserBuffer );
+    respConfig.pSyncInfo = NULL;
+
+    /* Create the semaphore for waiting for the whole upload response to finish. */
+    uploadFinishedSemCreated = IotSemaphore_Create( &( _uploadFinishedSem ), 0 /* Initial value. */, 1 /* Max value. */ );
+
+    if( uploadFinishedSemCreated == false )
+    {
+        IotLogError( "Failed to create a semaphore to wait for the response to finish." );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Initialize the HTTPS library. */
+    httpsClientStatus = IotHttpsClient_Init();
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred initializing the HTTPS library. Error code: %d", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Initialize the request to initialize internal request context, write the HTTP request first line to the
+     * _pReqUserBuffer header space, and write headers User-Agent and Host. */
+    httpsClientStatus = IotHttpsClient_InitializeRequest( &reqHandle, &reqConfig );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_InitializeRequest() with error code: %d", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Connect to S3. */
+    for( connAttempt = 1; connAttempt <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connAttempt++ )
+    {
+        httpsClientStatus = IotHttpsClient_Connect( &connHandle, &connConfig );
+
+        if( ( httpsClientStatus == IOT_HTTPS_CONNECTION_ERROR ) &&
+            ( connAttempt < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
+        {
+            IotLogError( "Failed to connect to the S3 server, retrying after %d ms.",
+                         IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
+            IotClock_SleepMs( IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
+            continue;
+        }
+        else
+        {
+            break;
+        }
+    }
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "Failed to connect to the S3 server. Error code: %d.", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Send the request and receive the response asynchronously. This will schedule the async request. We
+     * will return immediately after scheduling. */
+    httpsClientStatus = IotHttpsClient_SendAsync( connHandle, reqHandle, &respHandle, &respConfig );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "Failed to send the request asynchronously with error code: %d", httpsClientStatus );
+        /* If we failed to schedule an async request then this is an error and we should exit the loop. */
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Timing out waiting for the response to finish will fail the demo. */
+    if( IotSemaphore_TimedWait( &( _uploadFinishedSem ), IOT_HTTPS_DEMO_ASYNC_TIMEOUT_MS ) == false )
+    {
+        IotLogError( "Timed out waiting for the asynchronous request to complete." );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Check that the upload was successful. This variable is set during the _responseCompleteCallback(). */
+    if( uploadSuccess == false )
+    {
+        IotLogError( "Upload did not complete successfully." );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    #if defined( IOT_DEMO_HTTPS_PRESIGNED_GET_URL )
+        /* The size of uploaded file from a GET of the file size. */
+        uint32_t fileSize = 0;
+
+        IotLogInfo( "Now checking %.*s for the file uploaded...", addressLen, pAddress );
+
+        /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
+        httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                                                       strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                       &pPath,
+                                                       &pathLen );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "An error occurred in IotHttpsClient_GetUrlPath() on URL %s. Error code: %d",
+                         IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                         httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
+        httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                                                          strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                          &pAddress,
+                                                          &addressLen );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "An error occurred in IotHttpsClient_GetUrlAddress() on URL %s\r\n. Error code %d",
+                         IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                         httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        /* Verify the file was uploaded by retrieving the file size. */
+        if( _IotHttpsDemo_GetS3ObjectFileSize( &fileSize,
+                                               connHandle,
+                                               pPath,
+                                               strlen( pPath ),
+                                               pAddress,
+                                               addressLen,
+                                               _pReqUserBuffer,
+                                               IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE,
+                                               _pRespUserBuffer,
+                                               IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE ) != EXIT_SUCCESS )
+        {
+            IotLogError( "Failed to retrieve the s3 object size." );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        if( fileSize != IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE )
+        {
+            IotLogError( "Failed to upload the data to s3. Found the file size to be %d, but it should be %d.",
+                         fileSize,
+                         IOT_DEMO_HTTPS_UPLOAD_DATA );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+        IotLogInfo( "Verified file size on S3 is %d. File size specified to upload is %d.", fileSize, IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE );
+    #endif /* if defined( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ) */
+
+    IOT_FUNCTION_CLEANUP_BEGIN();
+
+    if( uploadFinishedSemCreated )
+    {
+        IotSemaphore_Destroy( &( _uploadFinishedSem ) );
+    }
+
+    /* Disconnect from the server even if it is already disconnected. */
+    IotHttpsClient_Disconnect( connHandle );
+    /* De-initialize the library because we are done using it. */
+    IotHttpsClient_Deinit();
+
+    IOT_FUNCTION_CLEANUP_END();
+}
diff --git a/demos/https/iot_demo_https_s3_upload_sync.c b/demos/https/iot_demo_https_s3_upload_sync.c
new file mode 100644
index 000000000..503d3bd67
--- /dev/null
+++ b/demos/https/iot_demo_https_s3_upload_sync.c
@@ -0,0 +1,486 @@
+/*
+ * Amazon FreeRTOS V201906.00 Major
+ * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in
+ * the Software without restriction, including without limitation the rights to
+ * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+ * the Software, and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * http://aws.amazon.com/freertos
+ * http://www.FreeRTOS.org
+ */
+
+/**
+ * @file iot_demo_https_s3_upload_sync.c
+ * @brief Demonstrates synchronous usage of the HTTPS library by performing a PUT requests on a file to S3.
+ */
+
+/* The config header is always included first. */
+#include "iot_config.h"
+
+/* C Standard includes. */
+#include <stdbool.h>
+#include <string.h>
+
+/* Set up logging for this demo. */
+#include "iot_demo_logging.h"
+
+/* Amazon FreeRTOS includes. */
+#include "iot_https_client.h"
+#include "iot_https_utils.h"
+#include "aws_demo_config.h"
+#include "platform/iot_network.h"
+#include "private/iot_error.h"
+#include "iot_demo_https_common.h"
+#include "platform/iot_clock.h"
+
+/**
+ * This demonstrates uploading a file to S3 using a pre-signed URL using the Amazon FreeRTOS HTTP Client library.
+ * The HTTPS Client library is a generic HTTP/1.1 client library that be used to upload files to other webservers as
+ * well.
+ *
+ * A presigned URL is required to run this demo. Please see the demos/https/README.md for instructions on how to
+ * generate one.
+ */
+
+/**
+ * @cond DOXYGEN_IGNORE
+ * Doxygen should ignore this section.
+ *
+ * Provide default values for undefined configuration settings.
+ */
+
+/* Presigned URL for S3 PUT Object access. A GET URL is defined to verify the demo.*/
+#ifndef IOT_DEMO_HTTPS_PRESIGNED_PUT_URL
+    #define IOT_DEMO_HTTPS_PRESIGNED_PUT_URL    "Please configure a presigned PUT URL in iot_config.h."
+#endif
+
+/* TLS port for HTTPS. */
+#ifndef IOT_DEMO_HTTPS_PORT
+    #define IOT_DEMO_HTTPS_PORT    ( ( uint16_t ) 443 )
+#endif
+
+#ifndef IOT_DEMO_HTTPS_TRUSTED_ROOT_CA
+    /* This the Baltimore Cybertrust root CA associated with the S3 server certificate. */
+    #define IOT_DEMO_HTTPS_TRUSTED_ROOT_CA                               \
+    "-----BEGIN CERTIFICATE-----\n"                                      \
+    "MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ\n" \
+    "RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD\n" \
+    "VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX\n" \
+    "DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y\n" \
+    "ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy\n" \
+    "VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr\n" \
+    "mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr\n" \
+    "IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK\n" \
+    "mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu\n" \
+    "XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy\n" \
+    "dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye\n" \
+    "jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1\n" \
+    "BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\n" \
+    "DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92\n" \
+    "9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx\n" \
+    "jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0\n" \
+    "Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz\n" \
+    "ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS\n" \
+    "R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp\n"                             \
+    "-----END CERTIFICATE-----\n"
+#endif /* ifndef IOT_DEMO_HTTPS_TRUSTED_ROOT_CA */
+
+/* Size in bytes of the User Buffer used to store the internal connection context. The size presented here accounts for
+ * storage of the internal connection context. The minimum size can be found in extern const unint32_t
+ * connectionUserBufferMinimumSize. */
+#ifndef IOT_DEMO_HTTPS_CONN_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_CONN_BUFFER_SIZE    ( ( int ) 512 )
+#endif
+
+/* Size in bytes of the user buffer used to store the internal request context and HTTP request header lines.
+ * The size presented here accounts for the storage of the internal context, the first request line in the HTTP
+ * formatted header and extra headers. The minimum size can be found in extern const uint32_t
+ * requestUserBufferMinimumSize. Keep in mind that this requestUserBufferMinimumSize does not include the size of the
+ * path in the request line. The path could be well over 100 characters long as it includes not only the object key name
+ * in S3, but also the query following. The query following has the AWSAccessKeyId, the expiration time, and the
+ * AWS Signature Version 4 signature.*/
+#ifndef IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE    ( ( int ) 512 )
+#endif
+
+/* Size in bytes of the user buffer used to store the internal response context and the HTTP response header lines.
+ * The size presented here accounts for the storage of the internal context, the first request line in the HTTP
+ * formatted header and extra headers. The minimum can be found in responseUserBufferMinimumSize.
+ * Keep in mind that if the headers from the response do not all fit into this buffer, then the rest of the headers
+ * will be discarded. The minimum size can be found in extern const uint32_t responseUserBufferMinimumSize. */
+#ifndef IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE
+    #define IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE    ( ( int ) 1024 )
+#endif
+
+/* Pointer to the data to upload.*/
+#ifndef IOT_DEMO_HTTPS_UPLOAD_DATA
+    #define IOT_DEMO_HTTPS_UPLOAD_DATA    "Hello World!"
+#endif
+
+/* The size of the data in bytes to upload. */
+#ifndef IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE
+    #define IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE    ( sizeof( IOT_DEMO_HTTPS_UPLOAD_DATA ) - 1 )
+#endif
+
+/* Time to wait in milliseconds before retrying the HTTPS Connection. A connection is only attempted again if
+ * IOT_HTTPS_CONNECTION_ERROR is returned from IotHttpsClient_Connect(). This indicates an error in the network
+ * layer. To view logging for network errors update IOT_LOG_LEVEL_NETWORK to IOT_LOG_ERROR in iot_config.h */
+#ifndef IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS
+    #define IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS    ( ( uint32_t ) 3000 )
+#endif
+
+/* Number of times to retry the HTTPS connection. A connection is only attempted again if
+ * IOT_HTTPS_CONNECTION_ERROR is returned from IotHttpsClient_Connect(). This indicates an error in the network
+ * layer. To view logging for network errors update IOT_LOG_LEVEL_NETWORK to IOT_LOG_ERROR in iot_config.h */
+#ifndef IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY
+    #define IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY    ( ( uint32_t ) 3 )
+#endif
+
+/* The timeout in milliseconds to wait on IotHttpsClient_SendSync(). This timeout is how long the routine will block
+ * for waiting for an HTTP response. It is possible that the server could close the connection after receiving a
+ * request, so never sending the response. */
+#ifndef IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS
+    #define IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS    ( ( uint32_t ) 60000 )
+#endif
+
+/** @endcond */
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Buffer used to store the internal connection context.
+ */
+static uint8_t _pConnUserBuffer[ IOT_DEMO_HTTPS_CONN_BUFFER_SIZE ] = { 0 };
+
+/**
+ * @brief Buffer used to store the request context and the HTTP request header lines.
+ */
+static uint8_t _pReqUserBuffer[ IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE ] = { 0 };
+
+/**
+ * @brief Buffer used to store the response context and the HTTP response header lines.
+ */
+static uint8_t _pRespUserBuffer[ IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE ] = { 0 };
+
+/*-----------------------------------------------------------*/
+
+/* Declaration of demo function. */
+int RunHttpsSyncUploadDemo( bool awsIotMqttMode,
+                            const char * pIdentifier,
+                            void * pNetworkServerInfo,
+                            void * pNetworkCredentialInfo,
+                            const IotNetworkInterface_t * pNetworkInterface );
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief The function that runs the HTTPS Synchronous Upload demo.
+ *
+ * @param[in] awsIotMqttMode Specify if this demo is running with the AWS IoT MQTT server. This is ignored in this demo.
+ * @param[in] pIdentifier NULL-terminated MQTT client identifier. This is ignored in this demo.
+ * @param[in] pNetworkServerInfo Contains network information specific for the MQTT demo. This is ignored in this demo.
+ * @param[in] pNetworkCredentialInfo Contains credential Info for a TLS connection.
+ * @param[in] pNetworkInterface Network interface to use for this demo.
+ *
+ * @return `EXIT_SUCCESS` if the demo completes successfully; `EXIT_FAILURE` otherwise.
+ */
+int RunHttpsSyncUploadDemo( bool awsIotMqttMode,
+                            const char * pIdentifier,
+                            void * pNetworkServerInfo,
+                            void * pNetworkCredentialInfo,
+                            const IotNetworkInterface_t * pNetworkInterface )
+{
+    IOT_FUNCTION_ENTRY( int, EXIT_SUCCESS );
+
+    /* Unused parameters. */
+    ( void ) awsIotMqttMode;
+    ( void ) pIdentifier;
+    ( void ) pNetworkServerInfo;
+
+    /* HTTPS Client library return status. */
+    IotHttpsReturnCode_t httpsClientStatus = IOT_HTTPS_OK;
+
+    /* Configurations for the HTTPS connection. */
+    IotHttpsConnectionInfo_t connConfig = { 0 };
+    /* Handle identifying the HTTPS connection. */
+    IotHttpsConnectionHandle_t connHandle = IOT_HTTPS_CONNECTION_HANDLE_INITIALIZER;
+    /* Configurations for the HTTPS request. */
+    IotHttpsRequestInfo_t reqConfig = { 0 };
+    /* Configurations for the HTTPS response. */
+    IotHttpsResponseInfo_t respConfig = { 0 };
+
+    /* Handle identifying the HTTP request. This is valid after the request has been initialized with
+     * IotHttpsClient_InitializeRequest(). */
+    IotHttpsRequestHandle_t reqHandle = IOT_HTTPS_REQUEST_HANDLE_INITIALIZER;
+
+    /* Handle identifying the HTTP response. This is valid after the reponse has been received with
+     * IotHttpsClient_SendSync(). */
+    IotHttpsResponseHandle_t respHandle = IOT_HTTPS_RESPONSE_HANDLE_INITIALIZER;
+    /* Synchronous request specific configurations. */
+    IotHttpsSyncInfo_t reqSyncInfo = { 0 };
+    /* Synchronous response specific configurations. */
+    IotHttpsSyncInfo_t respSyncInfo = { 0 };
+
+    /* The location of the path within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    const char * pPath = NULL;
+    /* The length of the path within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    size_t pathLen = 0;
+    /* The location of the address within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    const char * pAddress = NULL;
+    /* The length of the address within string IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    size_t addressLen = 0;
+    /* The status of HTTP response. */
+    uint16_t respStatus = IOT_HTTPS_STATUS_OK;
+    /* The current attempt in the number of connection tries. */
+    uint32_t connAttempt = 0;
+
+    IotLogInfo( "HTTPS Client Synchronous S3 upload demo using pre-signed URL: %s", IOT_DEMO_HTTPS_PRESIGNED_PUT_URL );
+
+    /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                                                   strlen( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL ),
+                                                   &pPath,
+                                                   &pathLen );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_GetUrlPath() on URL %s. Error code: %d",
+                     IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                     httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                                                      strlen( IOT_DEMO_HTTPS_PRESIGNED_PUT_URL ),
+                                                      &pAddress,
+                                                      &addressLen );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_GetUrlAddress() on URL %s\r\n. Error code %d",
+                     IOT_DEMO_HTTPS_PRESIGNED_PUT_URL,
+                     httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Set the connection configurations. */
+    connConfig.pAddress = pAddress;
+    connConfig.addressLen = addressLen;
+    connConfig.port = IOT_DEMO_HTTPS_PORT;
+    connConfig.pCaCert = IOT_DEMO_HTTPS_TRUSTED_ROOT_CA;
+    connConfig.caCertLen = sizeof( IOT_DEMO_HTTPS_TRUSTED_ROOT_CA );
+    connConfig.userBuffer.pBuffer = _pConnUserBuffer;
+    connConfig.userBuffer.bufferLen = sizeof( _pConnUserBuffer );
+    connConfig.pClientCert = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->pClientCert;
+    connConfig.clientCertLen = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->clientCertSize;
+    connConfig.pPrivateKey = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->pPrivateKey;
+    connConfig.privateKeyLen = ( ( IotNetworkCredentials_t * ) pNetworkCredentialInfo )->privateKeySize;
+    connConfig.pNetworkInterface = pNetworkInterface;
+
+    /* Set the configurations needed for a synchronous request. */
+    reqSyncInfo.pBody = ( uint8_t * ) ( IOT_DEMO_HTTPS_UPLOAD_DATA ); /* Pointer to the file/buffer of data we want to upload. */
+    reqSyncInfo.bodyLen = IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE;
+
+    /* Ignore the response body in the synchronous response. */
+    respSyncInfo.pBody = NULL;
+    respSyncInfo.bodyLen = 0;
+
+    /* The path is everything that is not the address. It also includes the query. So we get the strlen( pPath ) to
+     * acquire everything following in IOT_DEMO_HTTPS_PRESIGNED_PUT_URL. */
+    /* Set the request configurations. */
+    reqConfig.pPath = pPath;
+    reqConfig.pathLen = strlen( pPath );
+    reqConfig.pHost = pAddress;
+    reqConfig.hostLen = addressLen;
+
+    /* The PUT method is used to upload an object to S3 because it is simpler than using POST. POST requires AWS S3
+     * access specific header fields in the body of the message in a multipart/form-data encoded message. See
+     * https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPOST.html for more information about POST object. See
+     * https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html for more information about PUT object. */
+    reqConfig.method = IOT_HTTPS_METHOD_PUT;
+    reqConfig.isNonPersistent = false;
+    reqConfig.userBuffer.pBuffer = _pReqUserBuffer;
+    reqConfig.userBuffer.bufferLen = sizeof( _pReqUserBuffer );
+    reqConfig.isAsync = false;
+    reqConfig.u.pSyncInfo = &reqSyncInfo;
+
+    /* Set the response configurations. */
+    respConfig.userBuffer.pBuffer = _pRespUserBuffer;
+    respConfig.userBuffer.bufferLen = sizeof( _pRespUserBuffer );
+
+    /* Even though the body is being ignored, #IotHttpsResponseInfo_t.pSyncInfo should only be set to NULL if the
+     * response is being received asynchronously. */
+    respConfig.pSyncInfo = &respSyncInfo;
+
+    /* Initialize the HTTPS library. */
+    httpsClientStatus = IotHttpsClient_Init();
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred initializing the HTTPS library. Error code: %d", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Initialize the request to initialize internal request context, write the HTTP request first line to the
+     * _pReqUserBuffer header space, and write headers User-Agent and Host. */
+    httpsClientStatus = IotHttpsClient_InitializeRequest( &reqHandle, &reqConfig );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "An error occurred in IotHttpsClient_InitializeRequest() with error code: %d", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Connect to S3. */
+    for( connAttempt = 1; connAttempt <= IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY; connAttempt++ )
+    {
+        httpsClientStatus = IotHttpsClient_Connect( &connHandle, &connConfig );
+
+        if( ( httpsClientStatus == IOT_HTTPS_CONNECTION_ERROR ) &&
+            ( connAttempt < IOT_DEMO_HTTPS_CONNECTION_NUM_RETRY ) )
+        {
+            IotLogError( "Failed to connect to the S3 server, retrying after %d ms.",
+                         IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
+            IotClock_SleepMs( IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS );
+            continue;
+        }
+        else
+        {
+            break;
+        }
+    }
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "Failed to connect to the S3 server. Error code: %d.", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    /* Send the upload request. */
+    httpsClientStatus = IotHttpsClient_SendSync( connHandle, reqHandle, &respHandle, &respConfig, 0 );
+
+    /* If there was network error try again one more time. */
+    if( httpsClientStatus == IOT_HTTPS_NETWORK_ERROR )
+    {
+        /* Maybe the network error was because the server disconnected us. */
+        httpsClientStatus = IotHttpsClient_Connect( &connHandle, &connConfig );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "Failed to reconnect to the S3 server after a network error on IotHttpsClient_SendSync(). Error code %d.", httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        httpsClientStatus = IotHttpsClient_SendSync( connHandle, reqHandle, &respHandle, &respConfig, IOT_DEMO_HTTPS_SYNC_TIMEOUT_MS );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "Failed receiving the response on a second try after a network error. The error code is: %d", httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+    }
+
+    httpsClientStatus = IotHttpsClient_ReadResponseStatus( respHandle, &respStatus );
+
+    if( httpsClientStatus != IOT_HTTPS_OK )
+    {
+        IotLogError( "Error in retreiving the response status. Error code %d", httpsClientStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    if( respStatus != IOT_HTTPS_STATUS_OK )
+    {
+        IotLogError( "Failed to upload the data to s3. Response status: %d", respStatus );
+        IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+    }
+
+    IotLogInfo( "File was successfully uploaded." );
+
+    #if defined( IOT_DEMO_HTTPS_PRESIGNED_GET_URL )
+        /* The size of uploaded file from a GET of the file size. */
+        uint32_t fileSize = 0;
+
+        IotLogInfo( "Now checking %.*s for the file uploaded...", addressLen, pAddress );
+
+        /* Retrieve the path location and length from IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
+        httpsClientStatus = IotHttpsClient_GetUrlPath( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                                                       strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                       &pPath,
+                                                       &pathLen );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "An error occurred in IotHttpsClient_GetUrlPath() on URL %s. Error code: %d",
+                         IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                         httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        /* Retrieve the address location and length from the IOT_DEMO_HTTPS_PRESIGNED_GET_URL. */
+        httpsClientStatus = IotHttpsClient_GetUrlAddress( IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                                                          strlen( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ),
+                                                          &pAddress,
+                                                          &addressLen );
+
+        if( httpsClientStatus != IOT_HTTPS_OK )
+        {
+            IotLogError( "An error occurred in IotHttpsClient_GetUrlAddress() on URL %s\r\n. Error code %d",
+                         IOT_DEMO_HTTPS_PRESIGNED_GET_URL,
+                         httpsClientStatus );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        /* Verify the file was uploaded by retrieving the file size. */
+        if( _IotHttpsDemo_GetS3ObjectFileSize( &fileSize,
+                                               connHandle,
+                                               pPath,
+                                               strlen( pPath ),
+                                               pAddress,
+                                               addressLen,
+                                               _pReqUserBuffer,
+                                               IOT_DEMO_HTTPS_REQ_USER_BUFFER_SIZE,
+                                               _pRespUserBuffer,
+                                               IOT_DEMO_HTTPS_RESP_USER_BUFFER_SIZE ) != EXIT_SUCCESS )
+        {
+            IotLogError( "Failed to retrieve the s3 object size." );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+
+        if( fileSize != IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE )
+        {
+            IotLogError( "Failed to upload the data to s3. Found the file size to be %d, but it should be %d.",
+                         fileSize,
+                         IOT_DEMO_HTTPS_UPLOAD_DATA );
+            IOT_SET_AND_GOTO_CLEANUP( EXIT_FAILURE );
+        }
+        IotLogInfo( "Verified file size on S3 is %d. File size specified to upload is %d.", fileSize, IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE );
+    #endif /* if defined( IOT_DEMO_HTTPS_PRESIGNED_GET_URL ) */
+
+    IOT_FUNCTION_CLEANUP_BEGIN();
+
+    /* Disconnect from the server even if the server may have already disconnected us. */
+    if( connHandle != NULL )
+    {
+        IotHttpsClient_Disconnect( connHandle );
+    }
+
+    /* Deinitialize the library because we are done using it. */
+    IotHttpsClient_Deinit();
+
+    IOT_FUNCTION_CLEANUP_END();
+}
diff --git a/demos/https/presigned_urls_gen.py b/demos/https/presigned_urls_gen.py
index 1f197a601..fa50b7591 100644
--- a/demos/https/presigned_urls_gen.py
+++ b/demos/https/presigned_urls_gen.py
@@ -1,11 +1,14 @@
 #!/usr/bin/python
 
 import boto3
+from botocore.client import Config
 import argparse
 
 def get_presigned_urls(bucket_name, key_name):
-    # Get the service client.
-    s3 = boto3.client('s3')
+    # Get the service client. 
+    # SigV2 is being deprecated. If the boto3 installation in the current Python environment has an older version of 
+    # the package, then this configuration forces the use of SigV4.
+    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))
 
     client_method_dict = {
         'GET': 'get_object',
diff --git a/demos/include/iot_demo_runner.h b/demos/include/iot_demo_runner.h
index 81a4859f5..6ec7315cc 100644
--- a/demos/include/iot_demo_runner.h
+++ b/demos/include/iot_demo_runner.h
@@ -98,6 +98,10 @@
     #define DEMO_entryFUNCTION             RunHttpsSyncDownloadDemo
 #elif defined( CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED )
     #define DEMO_entryFUNCTION             RunHttpsAsyncDownloadDemo
+#elif defined( CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED )
+    #define DEMO_entryFUNCTION             RunHttpsSyncUploadDemo
+#elif defined( CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED )
+    #define DEMO_entryFUNCTION             RunHttpsAsyncUploadDemo
 #else /* if defined( CONFIG_MQTT_DEMO_ENABLED ) */
 /* if no demo was defined there will be no entry point defined and we will not be able to run the demo */
     #error "No demo to run. One demo should be enabled"
diff --git a/doc/config/https b/doc/config/https
index e08dbe243..1c9593513 100644
--- a/doc/config/https
+++ b/doc/config/https
@@ -20,8 +20,13 @@ INPUT = doc \
         doc/lib \
         libraries/c_sdk/standard/https/include \
         libraries/c_sdk/standard/https/include/types \
+        libraries/c_sdk/standard/https/src/private \
         libraries/c_sdk/standard/https/src \
-        libraries/c_sdk/standard/https/src/private
+        demos/ \
+        libraries/c_sdk/standard/https/test \
+        libraries/c_sdk/standard/https/test/unit \
+        libraries/c_sdk/standard/https/test/access \
+        libraries/c_sdk/standard/https/test/system 
 
 # Library file names.
 FILE_PATTERNS = *https*.c *https*.h *https*.txt
diff --git a/doc/lib/https.txt b/doc/lib/https.txt
index 5262bbba3..3d0939a81 100644
--- a/doc/lib/https.txt
+++ b/doc/lib/https.txt
@@ -77,25 +77,38 @@ The HTTPS Client library will invoke a task pool worker to send a request. It wi
 @page https_demo Demos
 @brief The HTTPS Client demos demonstrates usage of the HTTPS Client library.
 
-These demos shows downloading a file from S3 using a pre-signed URL using the Amazon FreeRTOS HTTP Client library. The HTTPS Client library is a generic HTTP/1.1 client library that be used to download files from other web servers as well.
+These demos show downloading a file from S3 and uploading a file to S3 using a pre-signed URL using the Amazon FreeRTOS HTTP Client library. The HTTPS Client library is a generic HTTP/1.1 client library that be used to download files from other web servers as well.
 
-See @subpage https_demo_usage for information on how to get the demo up and running.
+See @subpage https_download_demo_usage for information on how to get the download demo up and running.
+See @subpage https_upload_demo_usage for information on how to get the upload demo up and running.
 
-The main HTTPS Client demo files are [iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c) and [iot_demo_https_s3_download_sync.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_sync.c), which contain platform-independent code. See @ref building_demo for instructions on building the HTTPS Client demo.
+The main HTTPS Client demo files contain platform-independent code. See @ref building_demo for instructions on building the HTTPS Client demo.
 
-<h2>iot_demo_https_s3_download_sync.c</h2>
-@brief Synchronously download a file from S3 using a pre-signed URL.
+<h1> Demo files </h1>
 
-This demo will use @ref https_client_function_sendsync to download the file specified in S3.
+<h2>[iot_demo_https_s3_download_sync.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_sync.c)</h2>
+@brief Synchronously download a file from an S3 bucket using a pre-signed URL.
 
-<h2>iot_demo_https_s3_download_async.c</h2>
-@brief Asynchronously download a file from S3 using a pre-signed URL.
+This demo will use @ref https_client_function_sendsync to download the file specified in the S3 bucket.
 
-This demo will use @ref https_client_function_sendasync to download the file specified in S3.
+<h2>[iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c)</h2>
+@brief Asynchronously download a file from an S3 bucket using a pre-signed URL.
+
+This demo will use @ref https_client_function_sendasync to download the file specified in the S3 bucket.
+
+<h2>[iot_demo_https_s3_upload_sync.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_upload_sync.c)</h2>
+@brief Synchronously upload a file to an S3 bucket using a pre-signed URL.
+
+This demo will use @ref https_client_function_sendsync to upload a file to S3 bucket.
+
+<h2>[iot_demo_https_s3_upload_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_upload_async.c)</h2>
+@brief Asynchronously upload a file to an S3 bucket using a pre-signed URL.
+
+This demo will use @ref https_client_function_sendasync to upload a file to the S3 bucket.
 
 See @subpage https_demo_config for configuration settings that change the behavior of the demo.
 
-@page https_demo_usage Demo Usage Instructions
+@page https_download_demo_usage Download Demo Usage Instructions
 
 <ol>
     <li>
@@ -118,7 +131,7 @@ See @subpage https_demo_config for configuration settings that change the behavi
         \endcode  
 
         Please see [demos/https/README.md](https://github.com/aws/amazon-freertos/tree/master/demos/https/README.md) for information on the required Python version and Python package dependencies.
-          
+
         Example output:  
         \code
         #define IOT_DEMO_HTTPS_PRESIGNED_GET_URL    https://my-bucket.s3.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D
@@ -157,6 +170,8 @@ See @subpage https_demo_config for configuration settings that change the behavi
         *          CONFIG_OTA_UPDATE_DEMO_ENABLED
         *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
         *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
         *
         *  These defines are used in iot_demo_runner.h for demo selection */
 
@@ -167,37 +182,33 @@ See @subpage https_demo_config for configuration settings that change the behavi
         See @ref building_demo for instructions on building the demo.  
         A successful output looks like this:
         \code
-        11 558 [iot_thread] [INFO ][INIT][557] SDK successfully initialized.
-        12 558 [iot_thread] [INFO ][DEMO][558] Successfully initialized the demo. Network type for the demo: 4
-        13 558 [iot_thread] [INFO ][DEMO][558] S3 Download demo using pre-signed URL: https://my-bucket.s3.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D
-        14 2880 [NetRecv] [ERROR][NET][2880] Error 0 while receiving data.
-        15 2880 [NetRecv] [WARN ][NET][2880] Receive requested 760 bytes, but 400 bytes received instead.
-        16 2880 [iot_thread] [INFO ][DEMO][2880] Now requesting Range: bytes=0-511.
-        17 2920 [iot_thread] [INFO ][DEMO][2920] Response return code: 206
-        18 2920 [iot_thread] [INFO ][DEMO][2920] Response Body:
+        10 618 [iot_thread] [INFO ][INIT][618] SDK successfully initialized.
+        11 618 [iot_thread] [INFO ][DEMO][618] Successfully initialized the demo. Network type for the demo: 4
+        12 618 [iot_thread] [INFO ][DEMO][618] HTTPS Client Synchronous S3 download demo using pre-signed URL: https://sarem-public.s3.amazonaws.com/gettysburg.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expires=3600&X-Amz-Credential=AKIAIYLZ53PYH6JY77YQ%2F20190830%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-SignedHeaders=host&X-Amz-Date=20190830T171845Z&X-Amz-Signature=2b185273a920fe10b0bbf5a391c9af8af7caf0d76170eade4fd99f28d3a68a00
+        13 902 [iot_thread] [INFO ][DEMO][902] Now requesting Range: bytes=0-511.
+        14 942 [iot_thread] [INFO ][DEMO][942] Response return code: 206
+        15 942 [iot_thread] [INFO ][DEMO][942] Response Body:
         Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.
 
         Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altoge
-        19 2920 [iot_thread] [INFO ][DEMO][2920] Downloaded 512/1517
-        20 2920 [iot_thread] [INFO ][DEMO][2920] Now requesting Range: bytes=512-1023.
-        21 2979 [iot_thread] [INFO ][DEMO][2979] Response return code: 206
-        22 2979 [iot_thread] [INFO ][DEMO][2979] Response Body:
+        16 942 [iot_thread] [INFO ][DEMO][942] Downloaded 512/1517
+        17 942 [iot_thread] [INFO ][DEMO][942] Now requesting Range: bytes=512-1023.
+        18 1003 [iot_thread] [INFO ][DEMO][1003] Response return code: 206
+        19 1003 [iot_thread] [INFO ][DEMO][1003] Response Body:
         ther fitting and proper that we should do this.
 
         But, in a larger sense, we can not dedicate -- we can not consecrate -- we can not hallow -- this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly adv
-        23 2979 [iot_thread] [INFO ][DEMO][2979] Downloaded 1024/1517
-        24 2979 [iot_thread] [INFO ][DEMO][2979] Now requesting Range: bytes=1024-1516.
-        25 5019 [NetRecv] [ERROR][NET][5019] Error 0 while receiving data.
-        26 5019 [NetRecv] [WARN ][NET][5019] Receive requested 159 bytes, but 140 bytes received instead.
-        27 5019 [iot_thread] [INFO ][DEMO][5019] Response return code: 206
-        28 5019 [iot_thread] [INFO ][DEMO][5019] Response Body:
+        20 1003 [iot_thread] [INFO ][DEMO][1003] Downloaded 1024/1517
+        21 1003 [iot_thread] [INFO ][DEMO][1003] Now requesting Range: bytes=1024-1516.
+        22 1063 [iot_thread] [INFO ][DEMO][1063] Response return code: 206
+        23 1063 [iot_thread] [INFO ][DEMO][1063] Response Body:
         anced. It is rather for us to be here dedicated to the great task remaining before us -- that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion -- that we here highly resolve that these dead shall not have died in vain -- that this nation, under God, shall have a new birth of freedom -- and that government of the people, by the people, for the people, shall not perish from the earth.
 
         Abraham Lincoln
         November 19, 1863
-        29 5019 [iot_thread] [INFO ][DEMO][5019] Downloaded 1517/1517
-        30 5058 [iot_thread] [INFO ][DEMO][5058] Demo completed successfully.
-        31 5060 [iot_thread] [INFO ][INIT][5060] SDK cleanup done.
+        24 1063 [iot_thread] [INFO ][DEMO][1063] Downloaded 1517/1517
+        25 1102 [iot_thread] [INFO ][DEMO][1102] Demo completed successfully.
+        26 1105 [iot_thread] [INFO ][INIT][1105] SDK cleanup done.
         \endcode
     </li>
     <li>
@@ -215,6 +226,8 @@ See @subpage https_demo_config for configuration settings that change the behavi
         *          CONFIG_OTA_UPDATE_DEMO_ENABLED
         *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
         *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
         *
         *  These defines are used in iot_demo_runner.h for demo selection */
 
@@ -226,54 +239,174 @@ See @subpage https_demo_config for configuration settings that change the behavi
         A successful output looks like this:
 
         \code
-        11 682 [iot_thread] [INFO ][INIT][682] SDK successfully initialized.
-        12 682 [iot_thread] [INFO ][DEMO][682] Successfully initialized the demo. Network type for the demo: 4
-        13 682 [iot_thread] [INFO ][DEMO][682] S3 Download demo using pre-signed URL: https://my-bucket.s3.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D
-        14 2977 [NetRecv] [ERROR][NET][2977] Error 0 while receiving data.
-        15 2977 [NetRecv] [WARN ][NET][2977] Receive requested 768 bytes, but 400 bytes received instead.
-        16 2977 [iot_thread] [INFO ][DEMO][2977] Inside of the append header callback for part bytes=0-511
-        17 3018 [NetRecv] [INFO ][DEMO][3018] Inside of the read ready callback for part bytes=0-511 with network return code: 0
-        18 3018 [NetRecv] [INFO ][DEMO][3018] Response return code: 206 for bytes=0-511
-        19 3018 [NetRecv] [INFO ][DEMO][3018] Response Body for bytes=0-511:
+        10 632 [iot_thread] [INFO ][INIT][632] SDK successfully initialized.
+        11 632 [iot_thread] [INFO ][DEMO][632] Successfully initialized the demo. Network type for the demo: 4
+        12 632 [iot_thread] [INFO ][DEMO][632] HTTPS Client Asynchronous S3 download demo using pre-signed URL: https://sarem-public.s3.amazonaws.com/gettysburg.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expires=3600&X-Amz-Credential=AKIAIYLZ53PYH6JY77YQ%2F20190830%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-SignedHeaders=host&X-Amz-Date=20190830T171845Z&X-Amz-Signature=2b185273a920fe10b0bbf5a391c9af8af7caf0d76170eade4fd99f28d3a68a00
+        13 915 [iot_thread] [INFO ][DEMO][915] Inside of the append header callback for part bytes=0-511
+        14 954 [NetRecv] [INFO ][DEMO][954] Inside of the read ready callback for part bytes=0-511 with network return code: 0
+        15 954 [NetRecv] [INFO ][DEMO][954] Response return code: 206 for bytes=0-511
+        16 954 [NetRecv] [INFO ][DEMO][954] Response Body for bytes=0-511:
         Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.
 
         Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altoge
-        20 3018 [iot_thread] [INFO ][DEMO][3018] Inside of the append header callback for part bytes=512-1023
-        21 3018 [NetRecv] [INFO ][DEMO][3018] Part bytes=0-511 has been fully processed.
-        22 3018 [NetRecv] [INFO ][DEMO][3018] Downloaded: 512/1517
-        23 3078 [NetRecv] [INFO ][DEMO][3078] Inside of the read ready callback for part bytes=512-1023 with network return code: 0
-        24 3078 [NetRecv] [INFO ][DEMO][3078] Response return code: 206 for bytes=512-1023
-        25 3078 [NetRecv] [INFO ][DEMO][3078] Response Body for bytes=512-1023:
-        their fitting and proper that we should do this.
+        17 954 [iot_thread] [INFO ][DEMO][954] Inside of the append header callback for part bytes=512-1023
+        18 954 [NetRecv] [INFO ][DEMO][954] Part bytes=0-511 has been fully processed.
+        19 954 [NetRecv] [INFO ][DEMO][954] Downloaded: 512/1517
+        20 1014 [NetRecv] [INFO ][DEMO][1014] Inside of the read ready callback for part bytes=512-1023 with network return code: 0
+        21 1014 [NetRecv] [INFO ][DEMO][1014] Response return code: 206 for bytes=512-1023
+        22 1014 [NetRecv] [INFO ][DEMO][1014] Response Body for bytes=512-1023:
+        ther fitting and proper that we should do this.
 
         But, in a larger sense, we can not dedicate -- we can not consecrate -- we can not hallow -- this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly adv
-        26 3078 [iot_thread] [INFO ][DEMO][3078] Inside of the append header callback for part bytes=1024-1516
-        27 3079 [NetRecv] [INFO ][DEMO][3079] Part bytes=512-1023 has been fully processed.
-        28 3079 [NetRecv] [INFO ][DEMO][3079] Downloaded: 1024/1517
-        29 3118 [NetRecv] [INFO ][DEMO][3118] Inside of the read ready callback for part bytes=1024-1516 with network return code: 0
-        30 5118 [NetRecv] [ERROR][NET][5118] Error 0 while receiving data.
-        31 5118 [NetRecv] [WARN ][NET][5118] Receive requested 151 bytes, but 132 bytes received instead.
-        32 5118 [NetRecv] [INFO ][DEMO][5118] Response return code: 206 for bytes=1024-1516
-        33 5118 [NetRecv] [INFO ][DEMO][5118] Response Body for bytes=1024-1516:
+        23 1014 [iot_thread] [INFO ][DEMO][1014] Inside of the append header callback for part bytes=1024-1516
+        24 1014 [NetRecv] [INFO ][DEMO][1014] Part bytes=512-1023 has been fully processed.
+        25 1014 [NetRecv] [INFO ][DEMO][1014] Downloaded: 1024/1517
+        26 1074 [NetRecv] [INFO ][DEMO][1074] Inside of the read ready callback for part bytes=1024-1516 with network return code: 0
+        27 1074 [NetRecv] [INFO ][DEMO][1074] Response return code: 206 for bytes=1024-1516
+        28 1074 [NetRecv] [INFO ][DEMO][1074] Response Body for bytes=1024-1516:
         anced. It is rather for us to be here dedicated to the great task remaining before us -- that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion -- that we here highly resolve that these dead shall not have died in vain -- that this nation, under God, shall have a new birth of freedom -- and that government of the people, by the people, for the people, shall not perish from the earth.
 
         Abraham Lincoln
         November 19, 1863
-        34 5118 [NetRecv] [INFO ][DEMO][5118] Part bytes=1024-1516 has been fully processed.
-        35 5118 [NetRecv] [INFO ][DEMO][5118] Downloaded: 1517/1517
-        36 5177 [iot_thread] [INFO ][DEMO][5177] Demo completed successfully.
-        37 5179 [iot_thread] [INFO ][INIT][5179] SDK cleanup done.
+        29 1074 [NetRecv] [INFO ][DEMO][1074] Part bytes=1024-1516 has been fully processed.
+        30 1074 [NetRecv] [INFO ][DEMO][1074] Downloaded: 1517/1517
+        31 1114 [iot_thread] [INFO ][DEMO][1114] Demo completed successfully.
+        32 1116 [iot_thread] [INFO ][INIT][1116] SDK cleanup done.
+        \endcode
+          
+    </li>
+</ol>
+
+Notes:  
+    Please note that the buffer for printing may be smaller than 512 characters and the printed received response body may be truncated.<br><br>
+    "[NetRecv] [WARN ][NET][2977] Receive requested 768 bytes, but 400 bytes received instead." is OK because the library requests from the network interface the full size of the header buffer or body buffer.<br><br>
+    S3 will close the connection after 100 requests on the same connection. 
+
+
+@page https_upload_demo_usage Upload Demo Usage Instructions
+
+<ol>
+    <li>
+        Ensure that you have permissions in your AWS account to access S3.  
+        For information on AWS S3 please see: https://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html  
+    </li>
+    <li>
+        Install and configured the AWS CLI.  
+        For AWS CLI installation information please see: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html  
+        For AWS CLI configuration information please see: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html  
+    </li>
+    <li>
+        Run [demos/https/presigned_url_gen.py](https://github.com/aws/amazon-freertos/tree/master/demos/https/presigned_urls_gen.py) with your s3 **bucket-name** and s3 object key **object-key**.
+        \code
+        python presigned_url_gen.py --bucket my-bucket --key object-key
+        \endcode  
+
+        Please see [demos/https/README.md](https://github.com/aws/amazon-freertos/tree/master/demos/https/README.md) for information on the required Python version and Python package dependencies.
+
+        Example output:  
+        \code
+        #define IOT_DEMO_HTTPS_PRESIGNED_GET_URL    https://my-bucket.s3.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D
+        #define IOT_DEMO_HTTPS_PRESIGNED_PUT_URL    https://my-bucket.s3.amazonaws.com/object-key.txt?AWSAccessKeyId=ABABABABABABABABABAB&Expires=1560555644&Signature=SomeHash12345UrlLMnmOPqrStUvW
+        \endcode
+
+        Paste this output to iot_config.h.
+        <br>
+        <br>
+        Note:  
+        If your bucket is less than 24 hours old, then you will need to append the region the bucket was created in to the pre-signed URL:  
+        \code
+        https://my-bucket.s3-<region>.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D  
+        \endcode
+        Example: 
+        \code
+        https://my-bucket.s3-us-west-2.amazonaws.com/object-key.txt?AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Expires=1560555644&Signature=SomeHash12345UrlABcdEFgfIjK%3D  
+        \endcode
+        Please see https://aws.amazon.com/premiumsupport/knowledge-center/s3-http-307-response/ for more information.  
+    </li>
+    <li>
+        Paste your RSA-2048 or ECC-P256 keys into [aws_clientcredential_keys.h](https://github.com/aws/amazon-freertos/blob/master/demos/include/aws_clientcredential_keys.h). This is needed to for the TLS handshake with the AWS S3 HTTP Server.  
+    </li>
+    <li>
+        Enable the <b>Synchronous upload demo</b> by defining @ref CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED in aws_demo_config.h:
+        \code
+        /* To run a particular demo you need to define one of these.
+        * Only one demo can be configured at a time
+        *
+        *          CONFIG_MQTT_DEMO_ENABLED
+        *          CONFIG_SHADOW_DEMO_ENABLED
+        *          CONFIG_GREENGRASS_DISCOVERY_DEMO_ENABLED
+        *          CONFIG_TCP_ECHO_CLIENT_DEMO_ENABLED
+        *          CONFIG_DEFENDER_DEMO_ENABLED
+        *          CONFIG_POSIX_DEMO_ENABLED
+        *          CONFIG_OTA_UPDATE_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
+        *
+        *  These defines are used in iot_demo_runner.h for demo selection */
+
+        #define CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+        \endcode
+    </li>
+    <li>
+        See @ref building_demo for instructions on building the demo.  
+        A successful output looks like this:
+        \code
+        10 621 [iot_thread] [INFO ][INIT][621] SDK successfully initialized.
+        11 621 [iot_thread] [INFO ][DEMO][621] Successfully initialized the demo. Network type for the demo: 4
+        12 621 [iot_thread] [INFO ][DEMO][621] HTTPS Client Synchronous S3 upload demo using pre-signed URL: https://sarem-public.s3.amazonaws.com/helloworld5.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expires=3600&X-Amz-Credential=AKIAIYLZ53PYH6JY77YQ%2F201908313 971 [iot_thread] [INFO ][DEMO][970] File was successfully uploaded.
+        14 971 [iot_thread] [INFO ][DEMO][971] Now checking sarem-public.s3.amazonaws.com for the file uploaded...
+        15 1010 [iot_thread] [INFO ][DEMO][1010] Verified file size on S3 is 12. File size specified to upload is 12.
+        16 1070 [iot_thread] [INFO ][DEMO][1070] Demo completed successfully.
+        17 1073 [iot_thread] [INFO ][INIT][1073] SDK cleanup done.
+        \endcode
+    </li>
+    <li>
+        Enable the <b>Asynchronous upload demo</b> by defining either @ref CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED in aws_demo_config.h:  
+        \code
+        /* To run a particular demo you need to define one of these.
+        * Only one demo can be configured at a time
+        *
+        *          CONFIG_MQTT_DEMO_ENABLED
+        *          CONFIG_SHADOW_DEMO_ENABLED
+        *          CONFIG_GREENGRASS_DISCOVERY_DEMO_ENABLED
+        *          CONFIG_TCP_ECHO_CLIENT_DEMO_ENABLED
+        *          CONFIG_DEFENDER_DEMO_ENABLED
+        *          CONFIG_POSIX_DEMO_ENABLED
+        *          CONFIG_OTA_UPDATE_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+        *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
+        *
+        *  These defines are used in iot_demo_runner.h for demo selection */
+
+        #define CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
+        \endcode
+    </li>
+    <li>
+        See @ref building_demo for instructions on building the demo.  
+        A successful output looks like this:
+
+        \code
+        10 610 [iot_thread] [INFO ][INIT][610] SDK successfully initialized.
+        11 610 [iot_thread] [INFO ][DEMO][610] Successfully initialized the demo. Network type for the demo: 4
+        12 610 [iot_thread] [INFO ][DEMO][610] HTTPS Client Asynchronous S3 upload demo using pre-signed URL: https://sarem-public.s3.amazonaws.com/helloworld5.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expires=3600&X-Amz-Credential=AKIAIYLZ53PYH6JY77YQ%2F20190813 900 [iot_thread] [INFO ][DEMO][900] Now checking sarem-public.s3.amazonaws.com for the file uploaded...
+        14 940 [iot_thread] [INFO ][DEMO][940] Verified file size on S3 is 12. File size specified to upload is 12.
+        15 1000 [iot_thread] [INFO ][DEMO][1000] Demo completed successfully.
+        16 1002 [iot_thread] [INFO ][INIT][1002] SDK cleanup done.
         \endcode
           
     </li>
 </ol>
 
-Note:  
+Notes:  
     Please note that the buffer for printing may be smaller than 512 characters and the printed received response body may be truncated.<br>
-    "[NetRecv] [WARN ][NET][2977] Receive requested 768 bytes, but 400 bytes received instead." is OK because the library requests from the network interface the full size of the header buffer or body buffer.
 
 */
 
+
 /**
 @config_page{https_demo,Demo}
 @config_brief{https_demo,HTTP Client demo,demos}
@@ -341,6 +474,20 @@ Size in bytes of the buffer used to store the response body (parts of it). This
 @configpossible Any positive integer. <br>
 @configdefault `512`
 
+@section IOT_DEMO_HTTPS_UPLOAD_DATA
+@brief Pointer to the data to upload to S3. 
+
+This can be a pointer to a memory location or a string literal.
+
+@configpossible Any readable address location or string. <br>
+@configdefault `"Hello World!"
+
+@section IOT_DEMO_HTTPS_UPLOAD_DATA_SIZE
+@brief The size of the data pointed to by @ref IOT_DEMO_HTTPS_UPLOAD_DATA. 
+
+@configpossible Any positive integer. <br>
+@configdefault `( sizeof( IOT_DEMO_HTTPS_UPLOAD_DATA ) - 1 )`
+
 @section IOT_DEMO_HTTPS_CONNECTION_RETRY_WAIT_MS
 @brief Time to wait in milliseconds before retrying the HTTPS Connection.
 
@@ -361,12 +508,21 @@ in iot_config.h.
 @configpossible Any positive integer.
 @configdefault `3`
 
-<h1> Asynchronous Download Demo specific configurations:  </h1> 
-These configurations apply only to [iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c).
+@section IOT_HTTPS_DEMO_SYNC_TIMEOUT_MS
+@brief Timeout in milliseconds to wait for a response to to a synchronous request.
+
+This timeout is applied to function @ref https_client_function_sendsync.
+
+This configuration applies to [iot_demo_https_s3_download_sync.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_sync.c) and [iot_demo_https_s3_upload_sync.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_upload_sync.c)
+
+@configpossible Any positive integer. <br>
+@configdefault `60000`
 
 @section IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS
 @brief The maximum number of inflight asynchronous requests. 
 
+This configuration applies only to [iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c).
+
 This configures the total number of requests in the pool of HTTPS Client library configurations and handles. In order to send 
    a request asynchronously the memory for both the request buffers and the response buffers must not be shared between 
    other asynchronous requests on the same connection. You can reuse the buffer only after the request/response process
@@ -379,7 +535,9 @@ This configures the total number of requests in the pool of HTTPS Client library
 @section IOT_HTTPS_DEMO_ASYNC_TIMEOUT_MS
 @brief Timeout in milliseconds to wait for all asynchronous requests to finish.
 
-This timeout starts when the last @ref IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS sent have been scheduled.
+This configuration applies to [iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c) and [iot_demo_https_s3_upload_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_upload_async.c)
+
+For [iot_demo_https_s3_download_async.c](https://github.com/aws/amazon-freertos/tree/master/demos/https/iot_demo_https_s3_download_async.c) this timeout starts when the last @ref IOT_HTTPS_DEMO_MAX_ASYNC_REQUESTS sent have been scheduled.
 
 @configpossible Any positive integer. <br>
 @configdefault `300000`
diff --git a/freertos_kernel/portable/Renesas/RX100/port.c b/freertos_kernel/portable/Renesas/RX100/port.c
index edc3efedb..187b7b785 100644
--- a/freertos_kernel/portable/Renesas/RX100/port.c
+++ b/freertos_kernel/portable/Renesas/RX100/port.c
@@ -296,7 +296,7 @@ static void prvStartFirstTask( void )
 }
 /*-----------------------------------------------------------*/
 
-#pragma interrupt ( prvTickISR( vect = configTICK_VECTOR, enable ) )
+#pragma interrupt ( prvTickISR( vect = _VECT( configTICK_VECTOR ), enable ) )
 void prvTickISR( void )
 {
 	/* Increment the tick, and perform any processing the new tick value
diff --git a/libraries/c_sdk/standard/https/CMakeLists.txt b/libraries/c_sdk/standard/https/CMakeLists.txt
index a6d6f7b7b..8cc2f38ab 100644
--- a/libraries/c_sdk/standard/https/CMakeLists.txt
+++ b/libraries/c_sdk/standard/https/CMakeLists.txt
@@ -36,6 +36,7 @@ afr_module_dependencies(
     ${AFR_CURRENT_MODULE}
     PUBLIC
         AFR::common
+    PRIVATE
         3rdparty::http-parser
 )
 
@@ -61,5 +62,6 @@ afr_module_include_dirs(
 afr_module_dependencies(
     ${AFR_CURRENT_MODULE}
     INTERFACE
-        INTERFACE AFR::https
+        AFR::https
+        3rdparty::http-parser
 )
diff --git a/libraries/c_sdk/standard/https/include/types/iot_https_types.h b/libraries/c_sdk/standard/https/include/types/iot_https_types.h
index 04b9d3005..3a1cee535 100644
--- a/libraries/c_sdk/standard/https/include/types/iot_https_types.h
+++ b/libraries/c_sdk/standard/https/include/types/iot_https_types.h
@@ -448,7 +448,9 @@ typedef enum IotHttpsReturnCode
 typedef enum IotHttpsMethod
 {
     IOT_HTTPS_METHOD_GET = 0, /* Client-to-server method GET */
-    IOT_HTTPS_METHOD_HEAD     /* Client-to-server method HEAD */
+    IOT_HTTPS_METHOD_HEAD,    /* Client-to-server method HEAD */
+    IOT_HTTPS_METHOD_PUT,     /* Client-to-server method PUT */
+    IOT_HTTPS_METHOD_POST     /* Clietn-to-server method POST. */
 } IotHttpsMethod_t;
 
 /**
diff --git a/libraries/c_sdk/standard/https/src/iot_https_client.c b/libraries/c_sdk/standard/https/src/iot_https_client.c
index 6f2ca45f6..1ca50e686 100644
--- a/libraries/c_sdk/standard/https/src/iot_https_client.c
+++ b/libraries/c_sdk/standard/https/src/iot_https_client.c
@@ -24,7 +24,7 @@
  */
 
 /**
- * @file iot_https_client.h
+ * @file iot_https_client.c
  * @brief Implementation of the user-facing functions of the Amazon FreeRTOS HTTPS Client library.
  */
 
@@ -64,15 +64,15 @@
  */
 #define HTTPS_PARTIAL_HOST_HEADER_LINE                    HTTPS_HOST_HEADER HTTPS_HEADER_FIELD_SEPARATOR HTTPS_END_OF_HEADER_LINES_INDICATOR
 
-/*
+/**
  * String constants for the Connection header and possible values.
  *
  * This is used for writing headers automatically during the sending of the HTTP request.
  * "Connection: keep-alive\r\n" is written automatically for a persistent connection.
  * "Connection: close\r\n" is written automatically for a non-presistent connection.
  */
-#define HTTPS_CONNECTION_KEEP_ALIVE_HEADER_LINE           HTTPS_CONNECTION_HEADER HTTPS_HEADER_FIELD_SEPARATOR HTTPS_CONNECTION_KEEP_ALIVE_HEADER_VALUE HTTPS_END_OF_HEADER_LINES_INDICATOR
-#define HTTPS_CONNECTION_CLOSE_HEADER_LINE                HTTPS_CONNECTION_HEADER HTTPS_HEADER_FIELD_SEPARATOR HTTPS_CONNECTION_CLOSE_HEADER_VALUE HTTPS_END_OF_HEADER_LINES_INDICATOR
+#define HTTPS_CONNECTION_KEEP_ALIVE_HEADER_LINE           HTTPS_CONNECTION_HEADER HTTPS_HEADER_FIELD_SEPARATOR HTTPS_CONNECTION_KEEP_ALIVE_HEADER_VALUE HTTPS_END_OF_HEADER_LINES_INDICATOR /**< @brief String literal for "Connection: keep-alive\r\n". */
+#define HTTPS_CONNECTION_CLOSE_HEADER_LINE                HTTPS_CONNECTION_HEADER HTTPS_HEADER_FIELD_SEPARATOR HTTPS_CONNECTION_CLOSE_HEADER_VALUE HTTPS_END_OF_HEADER_LINES_INDICATOR      /**< @brief String literal for "Connection: close\r\n". */
 
 /**
  * @brief The length of the "Connection: keep-alive\r\n" header.
@@ -85,13 +85,13 @@
 #define HTTPS_CONNECTION_KEEP_ALIVE_HEADER_LINE_LENGTH    ( 24 )
 
 /**
- * @brief Indicates for the http-parser parsing execution function to tell it to keep parsing or to stop parsing.
+ * Indicates for the http-parser parsing execution function to tell it to keep parsing or to stop parsing.
  *
  * A value of 0 means the parser should keep parsing if there is more unparsed length.
  * A value greater than 0 tells the parser to stop parsing.
  */
-#define KEEP_PARSING                                      ( ( int ) 0 )
-#define STOP_PARSING                                      ( ( int ) 1 )
+#define KEEP_PARSING                                      ( ( int ) 0 ) /**< @brief Indicator in the http-parser callback to keep parsing when the function returns. */
+#define STOP_PARSING                                      ( ( int ) 1 ) /**< @brief Indicator in the http-parser callback to stop parsing when the function returns. */
 
 /*-----------------------------------------------------------*/
 
@@ -363,7 +363,7 @@ static IotHttpsReturnCode_t _networkSend( _httpsConnection_t * pHttpsConnection,
  *
  * @param[in] pHttpsConnection - HTTP connection context.
  * @param[in] pBuf - The buffer to receive the data into.
- * @param[in] len - The length of the data to receive.
+ * @param[in] bufLen - The length of the data to receive.
  * @param[in] numBytesRecv - The number of bytes read from the network.
  *
  * @return #IOT_HTTPS_OK if the data was received successfully.
@@ -517,7 +517,7 @@ static IotHttpsReturnCode_t _flushHttpsNetworkData( _httpsConnection_t * pHttpsC
  *
  * @param[in] pTaskPool Pointer to the system task pool.
  * @param[in] pJob Pointer the to the HTTP request sending job.
- * @param[in] pContext Pointer to an HTTP request, passed as an opaque context.
+ * @param[in] pUserContext Pointer to an HTTP request, passed as an opaque context.
  */
 static void _sendHttpsRequest( IotTaskPool_t pTaskPool,
                                IotTaskPoolJob_t pJob,
@@ -599,7 +599,7 @@ static void _cancelResponse( _httpsResponse_t * pHttpsResponse );
 /**
  * @brief Initialize the input pHttpsResponse with pRespInfo.
  *
- * @param[in] pHttpsResponse - Non-null HTTP response context.
+ * @param[in] pRespHandle - Non-null HTTP response context.
  * @param[in] pRespInfo - Response configuration information.
  * @param[in] pHttpsRequest - HTTP request to grab async information, persistence, and method from.
  */
@@ -1287,17 +1287,21 @@ static void _networkReceiveCallback( void * pNetworkConnection,
 
     IotMutex_Unlock( &( pHttpsConnection->connectionMutex ) );
 
-    /* Signal to a synchronous reponse that the response is complete. */
-    if( pCurrentHttpsResponse->isAsync && pCurrentHttpsResponse->pCallbacks->responseCompleteCallback )
-    {
-        pCurrentHttpsResponse->pCallbacks->responseCompleteCallback( pCurrentHttpsResponse->pUserPrivData, pCurrentHttpsResponse, status, pCurrentHttpsResponse->status );
-    }
-
-    /* For a synchronous request release the semaphore. */
+    /* The first if-case below notifies IotHttpsClient_SendSync() that the response is finished receiving. When
+     * IotHttpsClient_SendSync() returns the user is allowed to modify the user buffer used for the response context.
+     * In the asynchronous case, the responseCompleteCallback notifies the application that the user buffer used for the
+     * response context can be modified. Posting to the respFinishedSem or calling the responseCompleteCallback MUST be
+     * mutually exclusive by wrapping in an if/else. If these were separate if-cases, then there could be a context
+     * switch in between where the application modifies the buffer causing the next if-case to be executed. */
     if( pCurrentHttpsResponse->isAsync == false )
     {
         IotSemaphore_Post( &( pCurrentHttpsResponse->respFinishedSem ) );
     }
+    else if( pCurrentHttpsResponse->pCallbacks->responseCompleteCallback )
+    {
+        /* Signal to a synchronous reponse that the response is complete. */
+        pCurrentHttpsResponse->pCallbacks->responseCompleteCallback( pCurrentHttpsResponse->pUserPrivData, pCurrentHttpsResponse, status, pCurrentHttpsResponse->status );
+    }
 }
 
 /*-----------------------------------------------------------*/
@@ -1544,7 +1548,7 @@ static IotHttpsReturnCode_t _addHeader( _httpsRequest_t * pHttpsRequest,
      * (name:value\r\n). We need to add a "\r\n" at the end of headers. The use of
      * possibleLastHeaderAdditionalLength is to make sure that there is always
      * space for the last "\r\n". */
-    if( ( additionalLength + possibleLastHeaderAdditionalLength + pHttpsRequest->pHeadersCur ) > ( pHttpsRequest->pHeadersEnd ) )
+    if( ( additionalLength + possibleLastHeaderAdditionalLength ) > ( pHttpsRequest->pHeadersEnd - pHttpsRequest->pHeadersCur ) )
     {
         IotLogError( "There is %d space left in the header buffer, but we want to add %d more of header.",
                      pHttpsRequest->pHeadersEnd - pHttpsRequest->pHeadersCur,
@@ -2251,11 +2255,10 @@ static void _sendHttpsRequest( IotTaskPool_t pTaskPool,
         {
             IotSemaphore_Post( &( pHttpsResponse->respFinishedSem ) );
         }
-
-        /* Call the response complete callback. We always call this even if we did not receive the response to
-         * let the application know that the request has completed. */
-        if( pHttpsRequest->isAsync && pHttpsRequest->pCallbacks->responseCompleteCallback )
+        else if( pHttpsRequest->pCallbacks->responseCompleteCallback )
         {
+            /* Call the response complete callback. We always call this even if we did not receive the response to
+             * let the application know that the request has completed. */
             pHttpsRequest->pCallbacks->responseCompleteCallback( pHttpsRequest->pUserPrivData, NULL, status, 0 );
         }
     }
diff --git a/libraries/c_sdk/standard/https/src/iot_https_utils.c b/libraries/c_sdk/standard/https/src/iot_https_utils.c
index 29413516e..50c1bcb16 100644
--- a/libraries/c_sdk/standard/https/src/iot_https_utils.c
+++ b/libraries/c_sdk/standard/https/src/iot_https_utils.c
@@ -24,7 +24,7 @@
  */
 
 /**
- * @file iot_https_utils.h
+ * @file iot_https_utils.c
  * @brief Implements functions for HTTPS Client library utilities.
  */
 
diff --git a/libraries/c_sdk/standard/https/src/private/iot_https_internal.h b/libraries/c_sdk/standard/https/src/private/iot_https_internal.h
index e0f7b9cc4..b9dd2da64 100644
--- a/libraries/c_sdk/standard/https/src/private/iot_https_internal.h
+++ b/libraries/c_sdk/standard/https/src/private/iot_https_internal.h
@@ -260,7 +260,8 @@
 /**
  * @brief The state of the HTTP response parsing.
  *
- * This state notes what has been parsed in the HTTP response.
+ * This state notes what has been parsed in the HTTP response. As soon as any part of the HTTP response is received from
+ * the network, it is sent to be parsed.
  *
  * The states move as follows:
  * PARSER_STATE_NONE --> PARSER_STATE_IN_HEADERS --> PARSER_STATE_HEADERS_COMPLETE --> PARSER_STATE_BODY_COMPLETE
@@ -489,6 +490,8 @@ typedef struct _httpsRequest
 static const char * _pHttpsMethodStrings[] = {
     "GET",
     "HEAD",
+    "PUT",
+    "POST"
 };
 
 #endif /* IOT_HTTPS_INTERNAL_H_ */
diff --git a/libraries/c_sdk/standard/https/test/system/iot_tests_https_system.c b/libraries/c_sdk/standard/https/test/system/iot_tests_https_system.c
index c68691bf1..1cf20b64a 100644
--- a/libraries/c_sdk/standard/https/test/system/iot_tests_https_system.c
+++ b/libraries/c_sdk/standard/https/test/system/iot_tests_https_system.c
@@ -80,19 +80,43 @@
  * @brief Root certificate authority to verify the server connecting to.
  */
 #ifndef IOT_TEST_HTTPS_ROOT_CA
-    #define IOT_TEST_HTTPS_ROOT_CA    NULL
-#endif
-
-/**
- * @brief Client certificate and private key configurations.
+    #define IOT_TEST_HTTPS_ROOT_CA                                       \
+    "-----BEGIN CERTIFICATE-----\n"                                      \
+    "MIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\n" \
+    "MCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\n" \
+    "U3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\n" \
+    "NjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\n" \
+    "ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\n" \
+    "ZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\n" \
+    "DQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\n" \
+    "8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\n" \
+    "+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\n" \
+    "X9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\n" \
+    "K4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\n" \
+    "1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\n" \
+    "A1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\n" \
+    "zt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\n" \
+    "YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\n" \
+    "bGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\n" \
+    "DQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\n" \
+    "L7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\n" \
+    "eruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\n" \
+    "xy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\n" \
+    "VSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\n" \
+    "WQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\n"                 \
+    "-----END CERTIFICATE-----"
+#endif /* ifndef IOT_TEST_HTTPS_ROOT_CA */
+
+/**
+ * Client certificate and private key configurations.
  *
- * With PKCS #11 provisioning of the keys these parameters are deprecated.
+ * With PKCS #11 provisioning of the internally stored keys these parameters are deprecated.
  */
 #ifndef IOT_TEST_HTTPS_CLIENT_CERTIFICATE
-    #define IOT_TEST_HTTPS_CLIENT_CERTIFICATE    keyCLIENT_CERTIFICATE_PEM
+    #define IOT_TEST_HTTPS_CLIENT_CERTIFICATE    keyCLIENT_CERTIFICATE_PEM  /**< @brief Client certificate configuration. */
 #endif
 #ifndef IOT_TEST_HTTPS_CLIENT_PRIVATE_KEY
-    #define IOT_TEST_HTTPS_CLIENT_PRIVATE_KEY    keyCLIENT_PRIVATE_KEY_PEM
+    #define IOT_TEST_HTTPS_CLIENT_PRIVATE_KEY    keyCLIENT_PRIVATE_KEY_PEM  /**< @brief Client private key configuration. */
 #endif
 
 /**
@@ -152,6 +176,25 @@
  */
 #define HTTPS_TEST_GET_REQUEST_PATH         "/get"
 
+/**
+ * @brief The HTTP path for the put request.
+ */
+#define HTTPS_TEST_PUT_REQUEST_PATH         "/put"
+
+/**
+ * @brief The HTTP path for the post request.
+ */
+#define HTTPS_TEST_POST_REQUEST_PATH        "/post"
+
+/**
+ * @brief The HTTP post and put message body data.
+ */
+#define HTTPS_TEST_MESSAGE_BODY \
+    "{\r\b"                     \
+    "  \"data\":\"data\"\r\n"   \
+    "}"
+#define HTTPS_TEST_MESSAGE_BODY_LENGTH    ( sizeof( HTTPS_TEST_MESSAGE_BODY ) - 1 ) /**< @brief The length of the HTTP test request message body. */
+
 /*-----------------------------------------------------------*/
 
 /**
@@ -159,12 +202,12 @@
  */
 typedef struct _asyncVerificationParams
 {
-    IotSemaphore_t finishedSem;
-    uint16_t responseStatus;
-    uint32_t contentLength;
-    IotHttpsReturnCode_t contentLengthReturnCode;
-    uint32_t bodyReceivedLength;
-    IotHttpsReturnCode_t readResponseBodyReturnCode;
+    IotSemaphore_t finishedSem;                      /**< @brief This semaphore is posted to when the asynchronous response is finished. */
+    uint16_t responseStatus;                         /**< @brief The HTTP response status code in the current asynchronous request. */
+    uint32_t contentLength;                          /**< @brief The HTTP response body Content-Length the current asynchronous request. */
+    IotHttpsReturnCode_t contentLengthReturnCode;    /**< The HTTPS Client library return code from trying to read the Content-Length value. */
+    uint32_t bodyReceivedLength;                     /**< @brief The amount of HTTP response body read from the network. */
+    IotHttpsReturnCode_t readResponseBodyReturnCode; /**< @brief The HTTP Client library return code from reading HTTP response body from the network. */
 } _asyncVerificationParams_t;
 
 /*-----------------------------------------------------------*/
@@ -272,8 +315,16 @@ static void _testRequestSynchronous( bool isNonPersistent,
     uint32_t contentLength = 0;
     uint16_t responseStatus = 0;
 
-    syncReqInfo.pBody = NULL;
-    syncReqInfo.bodyLen = 0;
+    if( ( method == IOT_HTTPS_METHOD_PUT ) || ( method == IOT_HTTPS_METHOD_POST ) )
+    {
+        syncReqInfo.pBody = ( uint8_t * ) HTTPS_TEST_MESSAGE_BODY;
+        syncReqInfo.bodyLen = HTTPS_TEST_MESSAGE_BODY_LENGTH;
+    }
+    else
+    {
+        syncReqInfo.pBody = NULL;
+        syncReqInfo.bodyLen = 0;
+    }
 
     if( method != IOT_HTTPS_METHOD_HEAD )
     {
@@ -282,8 +333,26 @@ static void _testRequestSynchronous( bool isNonPersistent,
         syncRespInfo.bodyLen = sizeof( _pRespBodyBuffer );
     }
 
-    reqInfo.pPath = HTTPS_TEST_GET_REQUEST_PATH;
-    reqInfo.pathLen = sizeof( HTTPS_TEST_GET_REQUEST_PATH ) - 1;
+    if( ( method == IOT_HTTPS_METHOD_GET ) || ( method == IOT_HTTPS_METHOD_HEAD ) )
+    {
+        reqInfo.pPath = HTTPS_TEST_GET_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_GET_REQUEST_PATH ) - 1;
+    }
+    else if( method == IOT_HTTPS_METHOD_PUT )
+    {
+        reqInfo.pPath = HTTPS_TEST_PUT_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_PUT_REQUEST_PATH ) - 1;
+    }
+    else if( method == IOT_HTTPS_METHOD_POST )
+    {
+        reqInfo.pPath = HTTPS_TEST_POST_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_POST_REQUEST_PATH ) - 1;
+    }
+    else
+    {
+        TEST_FAIL_MESSAGE( "Unsupported method in the HTTPS Client library." );
+    }
+
     reqInfo.pHost = IOT_TEST_HTTPS_SERVER_HOST_NAME;
     reqInfo.hostLen = sizeof( IOT_TEST_HTTPS_SERVER_HOST_NAME ) - 1;
     reqInfo.method = method;
@@ -327,14 +396,14 @@ static void _testRequestSynchronous( bool isNonPersistent,
         TEST_ASSERT_GREATER_THAN( 0, contentLength );
     }
 
-    if( method == IOT_HTTPS_METHOD_GET )
+    if( method != IOT_HTTPS_METHOD_HEAD )
     {
         /* Verify the response body has some stuff in it. */
         TEST_ASSERT_GREATER_THAN( 0, strlen( ( char * ) ( respInfo.pSyncInfo->pBody ) ) );
     }
 
-    /* Some servers do not allow requests to be persistent. Even if the server closed the connection, the connection context
-     * state is controlled by the application. */
+    /* Some servers do not allow requests to be persistent. Even if the server closed the connection, the connection
+     * context state is controlled by the application. */
     if( isNonPersistent )
     {
         TEST_ASSERT_FALSE( connHandle->isConnected );
@@ -369,8 +438,26 @@ static void _testRequestAsynchronous( bool isNonPersistent,
     asyncRespInfo.callbacks.errorCallback = NULL;
     asyncRespInfo.pPrivData = &verifParams;
 
-    reqInfo.pPath = HTTPS_TEST_GET_REQUEST_PATH;
-    reqInfo.pathLen = sizeof( HTTPS_TEST_GET_REQUEST_PATH ) - 1;
+    if( ( method == IOT_HTTPS_METHOD_GET ) || ( method == IOT_HTTPS_METHOD_HEAD ) )
+    {
+        reqInfo.pPath = HTTPS_TEST_GET_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_GET_REQUEST_PATH ) - 1;
+    }
+    else if( method == IOT_HTTPS_METHOD_PUT )
+    {
+        reqInfo.pPath = HTTPS_TEST_PUT_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_PUT_REQUEST_PATH ) - 1;
+    }
+    else if( method == IOT_HTTPS_METHOD_POST )
+    {
+        reqInfo.pPath = HTTPS_TEST_POST_REQUEST_PATH;
+        reqInfo.pathLen = sizeof( HTTPS_TEST_POST_REQUEST_PATH ) - 1;
+    }
+    else
+    {
+        TEST_FAIL_MESSAGE( "Unsupported method in the HTTPS Client library." );
+    }
+
     reqInfo.pHost = IOT_TEST_HTTPS_SERVER_HOST_NAME;
     reqInfo.hostLen = sizeof( IOT_TEST_HTTPS_SERVER_HOST_NAME ) - 1;
     reqInfo.method = method;
@@ -405,7 +492,7 @@ static void _testRequestAsynchronous( bool isNonPersistent,
 
         TEST_ASSERT_TRUE( IotSemaphore_TimedWait( &( verifParams.finishedSem ), IOT_TEST_HTTPS_ASYNC_TIMEOUT_MS ) );
 
-        /* Verify all of the parameters set durign the callbacks. */
+        /* Verify all of the parameters set during the callbacks. */
         TEST_ASSERT_EQUAL( IOT_HTTPS_STATUS_OK, verifParams.responseStatus );
 
         if( verifParams.contentLengthReturnCode == IOT_HTTPS_OK )
@@ -413,14 +500,14 @@ static void _testRequestAsynchronous( bool isNonPersistent,
             TEST_ASSERT_GREATER_THAN( 0, verifParams.contentLength );
         }
 
-        if( method == IOT_HTTPS_METHOD_GET )
+        if( method != IOT_HTTPS_METHOD_HEAD )
         {
             TEST_ASSERT_GREATER_THAN( 0, verifParams.bodyReceivedLength );
             TEST_ASSERT_EQUAL( IOT_HTTPS_OK, verifParams.readResponseBodyReturnCode );
         }
 
-        /* Some servers do not allow requests to be persistent. Even if the server closed the connection, the connection context
-         * state is controlled by the application. */
+        /* Some servers do not allow requests to be persistent. Even if the server closed the connection, the connection
+         * context state is controlled by the application. */
         if( isNonPersistent )
         {
             TEST_ASSERT_FALSE( connHandle->isConnected );
@@ -469,6 +556,9 @@ TEST_TEAR_DOWN( HTTPS_Client_System )
 
 /*-----------------------------------------------------------*/
 
+/**
+ * @brief Test group runner for HTTPS Client System integration tests.
+ */
 TEST_GROUP_RUNNER( HTTPS_Client_System )
 {
     RUN_TEST_CASE( HTTPS_Client_System, GetRequestSynchronousPersistent );
@@ -479,6 +569,14 @@ TEST_GROUP_RUNNER( HTTPS_Client_System )
     RUN_TEST_CASE( HTTPS_Client_System, HeadRequestSynchronousNonPersistent );
     RUN_TEST_CASE( HTTPS_Client_System, HeadRequestAsynchronousPersistent );
     RUN_TEST_CASE( HTTPS_Client_System, HeadRequestAsynchronousNonPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PutRequestSynchronousPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PutRequestSynchronousNonPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PutRequestAsynchronousPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PutRequestAsynchronousNonPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PostRequestSynchronousPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PostRequestSynchronousNonPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PostRequestAsynchronousPersistent );
+    RUN_TEST_CASE( HTTPS_Client_System, PostRequestAsynchronousNonPersistent );
 }
 
 /*-----------------------------------------------------------*/
@@ -524,7 +622,7 @@ TEST( HTTPS_Client_System, GetRequestAsynchronousNonPersistent )
 /*-----------------------------------------------------------*/
 
 /**
- * @brief Verify a persistent GET request to the test server sent synchronously.
+ * @brief Verify a persistent HEAD request to the test server sent synchronously.
  */
 TEST( HTTPS_Client_System, HeadRequestSynchronousPersistent )
 {
@@ -534,7 +632,7 @@ TEST( HTTPS_Client_System, HeadRequestSynchronousPersistent )
 /*-----------------------------------------------------------*/
 
 /**
- * @brief Verify a non-persistent GET request to the test server sent synchronously.
+ * @brief Verify a non-persistent HEAD request to the test server sent synchronously.
  */
 TEST( HTTPS_Client_System, HeadRequestSynchronousNonPersistent )
 {
@@ -544,7 +642,7 @@ TEST( HTTPS_Client_System, HeadRequestSynchronousNonPersistent )
 /*-----------------------------------------------------------*/
 
 /**
- * @brief Verify a GET request to the test server sent asynchronously.
+ * @brief Verify a HEAD request to the test server sent asynchronously.
  */
 TEST( HTTPS_Client_System, HeadRequestAsynchronousPersistent )
 {
@@ -554,9 +652,89 @@ TEST( HTTPS_Client_System, HeadRequestAsynchronousPersistent )
 /*-----------------------------------------------------------*/
 
 /**
- * @brief Verify a GET request to the test server sent asynchronously.
+ * @brief Verify a HEAD request to the test server sent asynchronously.
  */
 TEST( HTTPS_Client_System, HeadRequestAsynchronousNonPersistent )
 {
     _testRequestAsynchronous( true, IOT_HTTPS_METHOD_HEAD );
 }
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a persistent PUT request to the test server sent synchronously.
+ */
+TEST( HTTPS_Client_System, PutRequestSynchronousPersistent )
+{
+    _testRequestSynchronous( false, IOT_HTTPS_METHOD_PUT );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a non-persistent PUT request to the test server sent synchronously.
+ */
+TEST( HTTPS_Client_System, PutRequestSynchronousNonPersistent )
+{
+    _testRequestSynchronous( true, IOT_HTTPS_METHOD_PUT );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a PUT request to the test server sent asynchronously.
+ */
+TEST( HTTPS_Client_System, PutRequestAsynchronousPersistent )
+{
+    _testRequestAsynchronous( false, IOT_HTTPS_METHOD_PUT );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a PUT request to the test server sent asynchronously.
+ */
+TEST( HTTPS_Client_System, PutRequestAsynchronousNonPersistent )
+{
+    _testRequestAsynchronous( true, IOT_HTTPS_METHOD_PUT );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a persistent POST request to the test server sent synchronously.
+ */
+TEST( HTTPS_Client_System, PostRequestSynchronousPersistent )
+{
+    _testRequestSynchronous( false, IOT_HTTPS_METHOD_POST );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a non-persistent POST request to the test server sent synchronously.
+ */
+TEST( HTTPS_Client_System, PostRequestSynchronousNonPersistent )
+{
+    _testRequestSynchronous( true, IOT_HTTPS_METHOD_POST );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a POST request to the test server sent asynchronously.
+ */
+TEST( HTTPS_Client_System, PostRequestAsynchronousPersistent )
+{
+    _testRequestAsynchronous( false, IOT_HTTPS_METHOD_POST );
+}
+
+/*-----------------------------------------------------------*/
+
+/**
+ * @brief Verify a POST request to the test server sent asynchronously.
+ */
+TEST( HTTPS_Client_System, PostRequestAsynchronousNonPersistent )
+{
+    _testRequestAsynchronous( true, IOT_HTTPS_METHOD_POST );
+}
diff --git a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_async.c b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_async.c
index db05fef7e..d102a27bc 100644
--- a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_async.c
+++ b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_async.c
@@ -63,10 +63,10 @@ typedef struct _asyncVerificationParams
     uint8_t numRequestsTotal;                                         /**< @brief The starting total of scheduled request. */
     int8_t numRequestsLeft;                                           /**< @brief The number of scheduled requests left that have not finished. */
     uint8_t appendHeaderCallbackCount;                                /**< @brief A count of the times #IotHttpsClientCallbacks_t.appendHeaderCallback has been called. */
-    uint8_t writeCallbackCount;                                       /**< @brief A count of the times #IotHttpsClientCallbacks_t.writeCallbackCount has been called. */
-    uint8_t readReadyCallbackCount;                                   /**< @brief A count of the times #IotHttpsClientCallbacks_t.readReadyCallbackCount has been called. */
-    uint8_t responseCompleteCallbackCount;                            /**< @brief A count of the times #IotHttpsClientCallbacks_t.responseCompleteCallbackCount has been called. */
-    uint8_t connectionClosedCallbackCount;                            /**< @brief A count of the times #IotHttpsClientCallbacks_t.connectionClosedCallbackCount has been called. */
+    uint8_t writeCallbackCount;                                       /**< @brief A count of the times #IotHttpsClientCallbacks_t.writeCallback has been called. */
+    uint8_t readReadyCallbackCount;                                   /**< @brief A count of the times #IotHttpsClientCallbacks_t.readReadyCallback has been called. */
+    uint8_t responseCompleteCallbackCount;                            /**< @brief A count of the times #IotHttpsClientCallbacks_t.responseCompleteCallback has been called. */
+    uint8_t connectionClosedCallbackCount;                            /**< @brief A count of the times #IotHttpsClientCallbacks_t.connectionClosedCallback has been called. */
     uint8_t errorCallbackCount;                                       /**< @brief A count of the times #IotHttpsClientCallbacks_t.errorCallback has been called. */
     IotHttpsReturnCode_t returnCode[ HTTPS_TEST_MAX_ASYNC_REQUESTS ]; /**< @brief The final return status of the async request. This is set during each decrement of numRequestsLeft. */
 
@@ -91,24 +91,24 @@ typedef struct _asyncVerificationParams
 static _asyncVerificationParams_t _verifParams = { 0 };
 
 /**
- * @brief HTTPS response and request user buffers for scheduling multiple requests.
+ * HTTPS response and request user buffers for scheduling multiple requests.
  */
-static uint8_t _pAsyncRespUserBuffers[ HTTPS_TEST_MAX_ASYNC_REQUESTS ][ HTTPS_TEST_RESP_USER_BUFFER_SIZE ] = { 0 };
-static uint8_t _pAsyncReqUserBuffers[ HTTPS_TEST_MAX_ASYNC_REQUESTS ][ HTTPS_TEST_REQ_USER_BUFFER_SIZE ] = { 0 };
+static uint8_t _pAsyncRespUserBuffers[ HTTPS_TEST_MAX_ASYNC_REQUESTS ][ HTTPS_TEST_RESP_USER_BUFFER_SIZE ] = { 0 }; /**< @brief HTTPS response user buffers for scheduling multiple requests. */
+static uint8_t _pAsyncReqUserBuffers[ HTTPS_TEST_MAX_ASYNC_REQUESTS ][ HTTPS_TEST_REQ_USER_BUFFER_SIZE ] = { 0 };   /**< @brief HTTPS request user buffers for scheduling multiple requests. */
 
 /**
- * @brief HTTPS request and response information configrations for scheduling multiple requests.
+ * HTTPS request and response information configrations for scheduling multiple requests.
  */
-static IotHttpsRequestInfo_t _pAsyncReqInfos[ HTTPS_TEST_MAX_ASYNC_REQUESTS ] = { 0 };
-static IotHttpsResponseInfo_t _pAsyncRespInfos[ HTTPS_TEST_MAX_ASYNC_REQUESTS ] = { 0 };
+static IotHttpsRequestInfo_t _pAsyncReqInfos[ HTTPS_TEST_MAX_ASYNC_REQUESTS ] = { 0 };   /**< @brief HTTPS request information configuration for scheduling multiple requests. */
+static IotHttpsResponseInfo_t _pAsyncRespInfos[ HTTPS_TEST_MAX_ASYNC_REQUESTS ] = { 0 }; /**< @brief HTTPS response information configuration for scheduling multiple requests. */
 
 /**
- * @brief HTTPS request and response handles for scheduling multiple requests.
+ * HTTPS request and response handles for scheduling multiple requests.
  *
  * Each of these handles corresponse to each of the user buffers _pAsyncRespUserBuffers and _pAsyncReqUserBuffers.
  */
-static IotHttpsRequestHandle_t _pAsyncRequestHandles[ HTTPS_TEST_MAX_ASYNC_REQUESTS ];
-static IotHttpsResponseHandle_t _pAsyncResponseHandles[ HTTPS_TEST_MAX_ASYNC_REQUESTS ];
+static IotHttpsRequestHandle_t _pAsyncRequestHandles[ HTTPS_TEST_MAX_ASYNC_REQUESTS ];   /**< @brief Request handles for scheduling multiple requests. */
+static IotHttpsResponseHandle_t _pAsyncResponseHandles[ HTTPS_TEST_MAX_ASYNC_REQUESTS ]; /**< @brief Response handles for scheduling multiple requests. */
 
 /**
  * @brief A base IotHttpsAsyncInfo_t to copy to each of the request information configurations for each request.
@@ -699,6 +699,9 @@ TEST_TEAR_DOWN( HTTPS_Client_Unit_Async )
 
 /*-----------------------------------------------------------*/
 
+/**
+ * @brief Test group runner for HTTPS Client function @ref https_client_function_sendasync
+ */
 TEST_GROUP_RUNNER( HTTPS_Client_Unit_Async )
 {
     RUN_TEST_CASE( HTTPS_Client_Unit_Async, SendAsyncInvalidParameters );
diff --git a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_client.c b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_client.c
index 366e1a229..600c8e2fd 100644
--- a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_client.c
+++ b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_client.c
@@ -63,7 +63,7 @@
     "Vary: *\r\n"                              \
     "P3P: CP=\"This is not a P3P policy\"\r\n" \
     "xserver: www1021\r\n"
-#define HTTPS_TEST_RESPONSE_HEADER_LINES_LENGTH    sizeof( HTTPS_TEST_RESPONSE_HEADER_LINES ) - 1
+#define HTTPS_TEST_RESPONSE_HEADER_LINES_LENGTH    sizeof( HTTPS_TEST_RESPONSE_HEADER_LINES ) - 1 /**< @brief The length of the HTTP response test header lines. */
 
 /**
  * @brief Header lines with no content-length for testing.
@@ -75,23 +75,23 @@
     "Vary: *\r\n"                                          \
     "P3P: CP=\"This is not a P3P policy\"\r\n"             \
     "xserver: www1021\r\n\r\n"
-#define HTTPS_TEST_RESPONSE_HEADER_LINES_NO_CONTENT_LENGTH_LENGTH    sizeof( HTTPS_TEST_RESPONSE_HEADER_LINES_NO_CONTENT_LENGTH ) - 1
+#define HTTPS_TEST_RESPONSE_HEADER_LINES_NO_CONTENT_LENGTH_LENGTH    sizeof( HTTPS_TEST_RESPONSE_HEADER_LINES_NO_CONTENT_LENGTH ) - 1 /**< @brief Length of the HTTP test response headers where there is no Content-Length. */
 
 /**
- * @brief Header name and values to verify reading the header.
+ * Header name and values to verify reading the header.
  */
-#define HTTPS_DATE_HEADER                                            "Date"
-#define HTTPS_ETAG_HEADER                                            "ETag"
-#define HTTPS_NONEXISTENT_HEADER                                     "Non-Existent-Header"
-#define HTTPS_DATE_HEADER_VALUE                                      "Sun, 14 Jul 2019 06:07:52 GMT"
-#define HTTPS_ETAG_HEADER_VALUE                                      "\"3356-5233\""
-#define HTTPS_CONTENT_LENGTH_VALUE                                   ( 43 )
+#define HTTPS_DATE_HEADER                                            "Date"                          /**< @brief "Date" HTTP header field name. */
+#define HTTPS_ETAG_HEADER                                            "ETag"                          /**< @brief "ETag" HTTP header field name. */
+#define HTTPS_NONEXISTENT_HEADER                                     "Non-Existent-Header"           /**< @brief HTTP header field name of a non-existing header for testing. */
+#define HTTPS_DATE_HEADER_VALUE                                      "Sun, 14 Jul 2019 06:07:52 GMT" /**< @brief Test header value for the "Date" header field. */
+#define HTTPS_ETAG_HEADER_VALUE                                      "\"3356-5233\""                 /**< @brief Test header value for the "ETag" header field. */
+#define HTTPS_CONTENT_LENGTH_VALUE                                   ( ( uint32_t ) 43 )             /**< @brief Test header value as a unsigned integer for the "Content-Length" header field. */
 
 /**
- * @brief The array lengths of to store the header values.
+ * The array lengths of local value buffers in the test to store the header values.
  */
-#define HTTPS_TEST_VALUE_BUFFER_LENGTH_LARGE_ENOUGH                  ( 64 )
-#define HTTPS_TEST_VALUE_BUFFER_LENGTH_TOO_SMALL                     ( 8 )
+#define HTTPS_TEST_VALUE_BUFFER_LENGTH_LARGE_ENOUGH                  ( 64 ) /**< @brief A large enough test length of a local value buffer to store the returned header value. */
+#define HTTPS_TEST_VALUE_BUFFER_LENGTH_TOO_SMALL                     ( 8 )  /**< @brief A too small test length of a local value buffer to store the returned header value. */
 
 /*-----------------------------------------------------------*/
 
diff --git a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.c b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.c
index 73b96f4d8..77e76806b 100644
--- a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.c
+++ b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.c
@@ -30,23 +30,23 @@
 #include "iot_tests_https_common.h"
 
 /**
- * @brief The generic response status line and header line information for generating a test HTTP response message header.
+ * The generic response status line and header line information for generating a test HTTP response message header.
  */
-#define HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE           "HTTP/1.1 200 OK\r\n"
-#define HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE_LENGTH    ( sizeof( HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE ) - 1 )
-#define HTTPS_TEST_GENERIC_HEADER                         "header"
-#define HTTPS_TEST_GENERIC_VALUE                          "value"
+#define HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE           "HTTP/1.1 200 OK\r\n"                                     /**< @brief A response status line for generating a test response message. */
+#define HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE_LENGTH    ( sizeof( HTTPS_TEST_GENERIC_RESPONSE_STATUS_LINE ) - 1 ) /**< @brief The length of the test response status line. */
+#define HTTPS_TEST_GENERIC_HEADER                         "header"                                                  /**< @brief A generic header name for generating a test response message. */
+#define HTTPS_TEST_GENERIC_VALUE                          "value"                                                   /**< @brief A generic header value for generating a test response message. */
 
 /**
- * @brief The maximum and minimum digits in a uint32_t.
+ * The maximum and minimum digits in a uint32_t.
  *
  * This is used to size an array holding some generic headers when generating a test HTTP response message.
  */
-#define MAX_UINT32_DIGITS                                 ( 10 ) /* 2^32 = 4294967296 which is 10 digits. */
-#define MIN_UINT32_DIGITS                                 ( 1 )
+#define MAX_UINT32_DIGITS                                 ( 10 ) /**< @brief The maximum digits in a uin32_t; 2^32 = 4294967296 which is 10 digits. */
+#define MIN_UINT32_DIGITS                                 ( 1 )  /**< @brief The minimum digits in a uin32_t. */
 
 /**
- * @brief the maximum and minimum line lengths of a generic HTTP response header of the form "headerN: valueN\r\n".
+ * The maximum and minimum line lengths of a generic HTTP response header of the form "headerN: valueN\r\n".
  *
  * These are needed for sizing arrays holding some intermediate string processing information when generating a test \
  * HTTP response message.
@@ -57,20 +57,20 @@
     + MAX_UINT32_DIGITS                      \
     + sizeof( HTTPS_TEST_GENERIC_VALUE ) - 1 \
     + MAX_UINT32_DIGITS                      \
-    + HTTPS_END_OF_HEADER_LINES_INDICATOR_LENGTH
+    + HTTPS_END_OF_HEADER_LINES_INDICATOR_LENGTH /**< @brief The maximum length of a header line used for generating a test HTTP response message. */
 #define MIN_GENERIC_HEADER_LINE_LENGTH       \
     sizeof( HTTPS_TEST_GENERIC_HEADER ) - 1  \
     + HTTPS_HEADER_FIELD_SEPARATOR_LENGTH    \
     + MIN_UINT32_DIGITS                      \
     + sizeof( HTTPS_TEST_GENERIC_VALUE ) - 1 \
     + MIN_UINT32_DIGITS                      \
-    + HTTPS_END_OF_HEADER_LINES_INDICATOR_LENGTH
+    + HTTPS_END_OF_HEADER_LINES_INDICATOR_LENGTH /**< @brief The minimum length of a header line used for generating a test HTTP response message. */
 
 /**
- * @brief Starting character and maximum letters to increment to generate a test HTTP response message body.
+ * Starting character and maximum letters to increment to generate a test HTTP response message body.
  */
-#define HTTPS_TEST_GENERIC_BODY_STARTING_CHAR    'a'
-#define NUM_LETTERS_IN_ALPHABET                  ( ( int ) 26 )
+#define HTTPS_TEST_GENERIC_BODY_STARTING_CHAR    'a'            /**< @brief The starting character in the body for generating a test HTTP response. */
+#define NUM_LETTERS_IN_ALPHABET                  ( ( int ) 26 ) /**< @brief The number of letters in the alphabet is used to restart the HTTP response body generation at 'a' again after 'z'. */
 
 /*-----------------------------------------------------------*/
 
diff --git a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.h b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.h
index fa8ce169c..ee016a6bb 100644
--- a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.h
+++ b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_common.h
@@ -145,7 +145,7 @@
     " consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla paria" \
     "tur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est lab" \
     "orum."
-#define HTTPS_TEST_REQUEST_BODY_LENGTH    ( sizeof( HTTPS_TEST_REQUEST_BODY ) - 1 )
+#define HTTPS_TEST_REQUEST_BODY_LENGTH    ( sizeof( HTTPS_TEST_REQUEST_BODY ) - 1 ) /**< @brief The length of the test HTTP request body. */
 
 /**
  * @brief A small test HTTPS response to share among the tests.
@@ -153,7 +153,7 @@
 #define HTTPS_TEST_SMALL_RESPONSE                               \
     "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r\n" \
     "header2: value2 value2a\r\nContent-Length: 26\r\n\r\nabcdefghijklmnopqrstuvwxyz"
-#define HTTPS_TEST_SMALL_RESPONSE_LENGTH    ( sizeof( HTTPS_TEST_SMALL_RESPONSE ) - 1 )
+#define HTTPS_TEST_SMALL_RESPONSE_LENGTH    ( sizeof( HTTPS_TEST_SMALL_RESPONSE ) - 1 ) /**< @brief The length of the small test HTTP response. */
 
 /**
  * @brief Test HTTP chunked response message to share among the tests.
@@ -172,7 +172,7 @@
     "xyz\r\n"                        \
     "0\r\n"                          \
     "\r\n"
-#define HTTPS_TEST_CHUNKED_RESPONSE_BODY_LENGTH    ( 0xB + 0xC + 3 )
+#define HTTPS_TEST_CHUNKED_RESPONSE_BODY_LENGTH    ( 0xB + 0xC + 3 ) /**< @brief The length of the test chunked HTTP response body. */
 
 /*-----------------------------------------------------------*/
 
@@ -393,7 +393,7 @@ static inline size_t _networkReceiveSuccess( void * pConnection,
  * This generates the test HTTP response message into _pRespMessageBuffer.
  * _pRespMessageBuffer must be zeroed out before calling this routine.
  * The length of _pRespMessageBuffer must not exceed headerLength + bodyLength.
- * The headerLength is the length of the raw HTTP headers includes delimiters like ": " and \r\n.
+ * The headerLength is the length of the raw HTTP headers includes delimiters like ": " and "\r\n".
  * The length of headerLength must be greater than:
  *      "HTTP/1.1 200 OK\r\nContent-Length: <bodyLengthStr>\r\nheader0: value0\r\n\r\n"
  * in order to generate meaningful header data.
diff --git a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_sync.c b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_sync.c
index 7c7839ac5..7e6b8afcb 100644
--- a/libraries/c_sdk/standard/https/test/unit/iot_tests_https_sync.c
+++ b/libraries/c_sdk/standard/https/test/unit/iot_tests_https_sync.c
@@ -47,25 +47,25 @@
 #define HTTPS_TEST_NETWORK_RECEIVE_CALLBACK_WAIT_MS        ( ( uint32_t ) 300 )
 
 /**
- * @brief Definitions for part of the small HTTP test response.
+ * Definitions for part of the small HTTP test response.
  *
  * Theser are used to verify behavior when the header buffer ends with just a part of the HTTP response headers.
  */
-#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_CARRIAGE_RETURN    "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r"
-#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_NEWLINE            "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r\n"
-#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_COLON              "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1:"
-#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_SPACE              "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: "
+#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_CARRIAGE_RETURN    "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r"   /**< @brief A test response from the network that goes up to a carriage return in the HTTP response headers. */
+#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_NEWLINE            "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r\n" /**< @brief A test response from the network that goes up to a newline in the HTTP response headers.  */
+#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_COLON              "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1:"            /**< @brief A test response from the network that goes up to a colon in the HTTP response headers. */
+#define HTTPS_TEST_SMALL_RESPONSE_UP_TO_SPACE              "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: "           /**< @brief A test response from the network that goes up to the space after a colon in the HTTP response headers. */
 #define HTTPS_TEST_SMALL_RESPONSE_UP_TO_SPACE_IN_BETWEEN_VALUE \
-    "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r\nheader2: value2 "
-#define HTTPS_TEST_HEADER1                                 "header1"
-#define HTTPS_TEST_HEADER1_PLUS_COLON                      "header1:"
-#define HTTPS_TEST_HEADER1_PLUS_SPACE                      "header1: "
-#define HTTPS_TEST_HEADER2                                 "header2"
-#define HTTPS_TEST_HEADER_VALUE1                           "value1"
-#define HTTPS_TEST_HEADER_VALUE2_PLUS_SPACE                "value2 "
-#define HTTPS_TEST_HEADER_VALUE2_VALUE2A                   "value2 value2a"
-#define HTTPS_TEST_HEADER_VALUE1_PLUS_CARRIAGE_RETURN      "value1\r"
-#define HTTPS_TEST_HEADER_VALUE1_PLUS_NEWLINE              "value1\r\n"
+    "HTTP/1.1 200 OK\r\nheader0: value0\r\nheader1: value1\r\nheader2: value2 "                                        /**< @brief A test response from the network that goes up to the space that is after a header value in the HTTP response headers. */
+#define HTTPS_TEST_HEADER1                                 "header1"                                                   /**< @brief The string literal for a header field named "header1". This is for test result checking. */
+#define HTTPS_TEST_HEADER1_PLUS_COLON                      "header1:"                                                  /**< @brief The string literal for a header field named "header1" including the colon after. */
+#define HTTPS_TEST_HEADER1_PLUS_SPACE                      "header1: "                                                 /**< @brief The string literal for a header field named "header1" including the colon and space after. */
+#define HTTPS_TEST_HEADER2                                 "header2"                                                   /**< @brief The string literal for a header field named "header2". This is for test result checking. */
+#define HTTPS_TEST_HEADER_VALUE1                           "value1"                                                    /**< @brief The string literal for a header value named "value1". */
+#define HTTPS_TEST_HEADER_VALUE2_PLUS_SPACE                "value2 "                                                   /**< @brief The string literal for a header value named "value2." */
+#define HTTPS_TEST_HEADER_VALUE2_VALUE2A                   "value2 value2a"                                            /**< @brief The string literal a header value that contains two strings separated by a space. */
+#define HTTPS_TEST_HEADER_VALUE1_PLUS_CARRIAGE_RETURN      "value1\r"                                                  /**< @brief the string literal for a header value with the carriage return following it. */
+#define HTTPS_TEST_HEADER_VALUE1_PLUS_NEWLINE              "value1\r\n"                                                /**< @brief the string ltieral for a header value with the carriage return and newline following it. */
 
 /*-----------------------------------------------------------*/
 
@@ -104,7 +104,7 @@ static bool _alreadyCreatedReceiveCallbackThread = false;
 static IotHttpsRequestHandle_t _currentlySendingRequestHandle = IOT_HTTPS_REQUEST_HANDLE_INITIALIZER;
 
 /**
- * @brief A IotHttpsSyncInfo_t for requests and response to share among the tests.
+ * #IotHttpsSyncInfo_t for requests and response to share among the tests.
  *
  * Even though the method is a GET method for the test _reqInfo, we apply a request body for unit testing purposes. A
  * request body is allowed for a GET method according to the HTTP specification, although it is pointless in practice.
@@ -114,13 +114,14 @@ static IotHttpsSyncInfo_t _syncRequestInfo =
     .pBody   = ( uint8_t * ) ( HTTPS_TEST_REQUEST_BODY ),
     /* Constant C string in macros have a NULL terminating character that we want to omit. */
     .bodyLen = HTTPS_TEST_REQUEST_BODY_LENGTH
-};
+}; /**< @brief A #IotHttpsSyncInfo_t for requests to share among the tests. */
+
 static IotHttpsSyncInfo_t _syncResponseInfo =
 {
     .pBody   = _pRespBodyBuffer,
     /* Constant C string in macros have a NULL terminating character that we want to omit. */
     .bodyLen = sizeof( _pRespBodyBuffer )
-};
+}; /**< @brief A #IotHttpsSyncInfo_t for responses to share among the tests. */
 
 /**
  * @brief A IotHttpsRequestInfo_t to share among the tests.
@@ -452,7 +453,7 @@ TEST_TEAR_DOWN( HTTPS_Client_Unit_Sync )
 /*-----------------------------------------------------------*/
 
 /**
- * @brief Test group runner for HTTPS Client API tests.
+ * @brief Test group runner for HTTPS Client @ref https_client_function_sendsync.
  */
 TEST_GROUP_RUNNER( HTTPS_Client_Unit_Sync )
 {
diff --git a/projects/infineon/xmc4800_iotkit/dave4/aws_demos/.project b/projects/infineon/xmc4800_iotkit/dave4/aws_demos/.project
index d33cdc5ea..e6a9a0b26 100644
--- a/projects/infineon/xmc4800_iotkit/dave4/aws_demos/.project
+++ b/projects/infineon/xmc4800_iotkit/dave4/aws_demos/.project
@@ -1053,6 +1053,16 @@
 			<type>1</type>
 			<locationURI>AFR_HOME/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>AFR_HOME/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>AFR_HOME/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/projects/mediatek/mt7697hx-dev-kit/uvision/aws_demos/aws_demos.uvprojx b/projects/mediatek/mt7697hx-dev-kit/uvision/aws_demos/aws_demos.uvprojx
index 926ad5f00..bc8ac5247 100644
--- a/projects/mediatek/mt7697hx-dev-kit/uvision/aws_demos/aws_demos.uvprojx
+++ b/projects/mediatek/mt7697hx-dev-kit/uvision/aws_demos/aws_demos.uvprojx
@@ -335,7 +335,7 @@
 							<MiscControls>--C99</MiscControls>
 							<Define>PCFG_OS=2 _REENT_SMALL PRODUCT_VERSION=7687 MTK_BLE_SMTCN_ENABLE MTK_BT_LWIP_ENABLE MTK_BLE_BQB_TEST_ENABLE MTK_BLE_CLI_ENABLE MTK_BLE_BQB_CLI_ENABLE MTK_HCI_CONSOLE_MIX_ENABLE MTK_MINISUPP_ENABLE MTK_BSPEXT_ENABLE MTK_HAL_LOWPOWER_ENABLE MTK_LWIP_CLI_ENABLE MTK_HTTPCLIENT_SSL_ENABLE MTK_IPERF_ENABLE MTK_SMTCN_ENABLE MTK_CLI_TEST_MODE_ENABLE MTK_WIFI_REPEATER_ENABLE  CONFIG_REPEATER MTK_DEBUG_LEVEL_NONE MTK_WIFI_PRIVILEGE_ENABLE SUPPORT_MBEDTLS __MTK_BLE_ONLY_ENABLE__ MTK_SINGLE_SKU_SUPPORT HAL_DFS_MODULE_ENABLED LWIP_NO_STDINT_H=1 LWIP_TIMEVAL_PRIVATE=1 __little_endian__=1</Define>
 							<Undefine/>
-							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/mediatek/sdk/kernel/service/inc;../../../../../vendors/mediatek/sdk/driver/CMSIS/Device/MTK/mt7687/Include;../../../../../vendors/mediatek/sdk/driver/CMSIS/Include;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/src/common/include;../../../../../vendors/mediatek/sdk/driver/chip/inc;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/ept/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/util/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/external_flash/inc;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/application_code/mediatek_code;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/application_code/mediatek_code/include;../../../../../demos/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/3rdparty/tracealyzer_recorder/Include;../../../../../demos/network_manager;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/abstractions/wifi/include;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/minisupp/inc;../../../../../vendors/mediatek/sdk/middleware/third_party/ping/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/dhcpd/inc;../../../../../libraries/3rdparty/lwip/src/portable/mediatek/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/lwip/src/include;../../../../../libraries/3rdparty/lwip/src/include/lwip;../../../../../libraries/3rdparty/lwip/src/portable;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn;</IncludePath>
+							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/mediatek/sdk/kernel/service/inc;../../../../../vendors/mediatek/sdk/driver/CMSIS/Device/MTK/mt7687/Include;../../../../../vendors/mediatek/sdk/driver/CMSIS/Include;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/src/common/include;../../../../../vendors/mediatek/sdk/driver/chip/inc;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/ept/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/util/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/external_flash/inc;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/application_code/mediatek_code;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/application_code/mediatek_code/include;../../../../../demos/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/3rdparty/tracealyzer_recorder/Include;../../../../../demos/network_manager;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/abstractions/wifi/include;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/minisupp/inc;../../../../../vendors/mediatek/sdk/middleware/third_party/ping/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/dhcpd/inc;../../../../../libraries/3rdparty/lwip/src/portable/mediatek/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/lwip/src/include;../../../../../libraries/3rdparty/lwip/src/include/lwip;../../../../../libraries/3rdparty/lwip/src/portable;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn</IncludePath>
 						</VariousControls>
 					</Cads>
 					<Aads>
@@ -1789,6 +1789,16 @@
 							<FileType>1</FileType>
 							<FilePath>../../../../../demos/https/iot_demo_https_s3_download_async.c</FilePath>
 						</File>
+						<File>
+							<FileName>iot_demo_https_s3_upload_sync.c</FileName>
+							<FileType>1</FileType>
+							<FilePath>../../../../../demos/https/iot_demo_https_s3_upload_sync.c</FilePath>
+						</File>
+						<File>
+							<FileName>iot_demo_https_s3_upload_async.c</FileName>
+							<FileType>1</FileType>
+							<FilePath>../../../../../demos/https/iot_demo_https_s3_upload_async.c</FilePath>
+						</File>
 						<File>
 							<FileName>iot_demo_https_common.c</FileName>
 							<FileType>1</FileType>
diff --git a/projects/mediatek/mt7697hx-dev-kit/uvision/aws_tests/aws_tests.uvprojx b/projects/mediatek/mt7697hx-dev-kit/uvision/aws_tests/aws_tests.uvprojx
index c3caf0c30..f3018c579 100644
--- a/projects/mediatek/mt7697hx-dev-kit/uvision/aws_tests/aws_tests.uvprojx
+++ b/projects/mediatek/mt7697hx-dev-kit/uvision/aws_tests/aws_tests.uvprojx
@@ -335,7 +335,7 @@
 							<MiscControls>--C99</MiscControls>
 							<Define>PCFG_OS=2 _REENT_SMALL PRODUCT_VERSION=7687 MTK_BLE_SMTCN_ENABLE MTK_BT_LWIP_ENABLE MTK_BLE_BQB_TEST_ENABLE MTK_BLE_CLI_ENABLE MTK_BLE_BQB_CLI_ENABLE MTK_HCI_CONSOLE_MIX_ENABLE MTK_MINISUPP_ENABLE MTK_BSPEXT_ENABLE MTK_HAL_LOWPOWER_ENABLE MTK_LWIP_CLI_ENABLE MTK_HTTPCLIENT_SSL_ENABLE MTK_IPERF_ENABLE MTK_SMTCN_ENABLE MTK_CLI_TEST_MODE_ENABLE MTK_WIFI_REPEATER_ENABLE  CONFIG_REPEATER MTK_DEBUG_LEVEL_NONE MTK_WIFI_PRIVILEGE_ENABLE SUPPORT_MBEDTLS __MTK_BLE_ONLY_ENABLE__ MTK_SINGLE_SKU_SUPPORT HAL_DFS_MODULE_ENABLED LWIP_NO_STDINT_H=1 LWIP_TIMEVAL_PRIVATE=1 __little_endian__=1 AMAZON_FREERTOS_ENABLE_UNIT_TESTS</Define>
 							<Undefine/>
-							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/mediatek/sdk/kernel/service/inc;../../../../../vendors/mediatek/sdk/driver/CMSIS/Device/MTK/mt7687/Include;../../../../../vendors/mediatek/sdk/driver/CMSIS/Include;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/src/common/include;../../../../../vendors/mediatek/sdk/driver/chip/inc;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/ept/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/util/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/external_flash/inc;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/config_files;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/application_code/mediatek_code;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/application_code/mediatek_code/include;../../../../../tests/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/3rdparty/tracealyzer_recorder/Include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/aws/ota/test;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/abstractions/wifi/include;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/minisupp/inc;../../../../../vendors/mediatek/sdk/middleware/third_party/ping/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/dhcpd/inc;../../../../../libraries/3rdparty/lwip/src/portable/mediatek/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/test/access;../../../../../libraries/c_sdk/standard/mqtt/src;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/aws/shadow/src;../../../../../libraries/c_sdk/standard/https/test/access;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/c_sdk/standard/https/src;../../../../../libraries/freertos_plus/aws/greengrass/test;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/freertos_plus/aws/greengrass/src;../../../../../libraries/c_sdk/aws/defender/src/private;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/lwip/src/include;../../../../../libraries/3rdparty/lwip/src/include/lwip;../../../../../libraries/3rdparty/lwip/src/portable;../../../../../libraries/3rdparty/unity/src;../../../../../libraries/3rdparty/unity/extras/fixture/src;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn;</IncludePath>
+							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/mediatek/sdk/kernel/service/inc;../../../../../vendors/mediatek/sdk/driver/CMSIS/Device/MTK/mt7687/Include;../../../../../vendors/mediatek/sdk/driver/CMSIS/Include;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/src/common/include;../../../../../vendors/mediatek/sdk/driver/chip/inc;../../../../../vendors/mediatek/sdk/driver/chip/mt7687/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/ept/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/util/inc;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/external_flash/inc;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/config_files;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/application_code/mediatek_code;../../../../../vendors/mediatek/boards/mt7697hx-dev-kit/aws_tests/application_code/mediatek_code/include;../../../../../tests/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/3rdparty/tracealyzer_recorder/Include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/aws/ota/test;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/abstractions/wifi/include;../../../../../vendors/mediatek/sdk/driver/board/mt76x7_hdk/wifi/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/minisupp/inc;../../../../../vendors/mediatek/sdk/middleware/third_party/ping/inc;../../../../../vendors/mediatek/sdk/middleware/MTK/dhcpd/inc;../../../../../libraries/3rdparty/lwip/src/portable/mediatek/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/test/access;../../../../../libraries/c_sdk/standard/mqtt/src;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/aws/shadow/src;../../../../../libraries/c_sdk/standard/https/test/access;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/c_sdk/standard/https/src;../../../../../libraries/freertos_plus/aws/greengrass/test;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/freertos_plus/aws/greengrass/src;../../../../../libraries/c_sdk/aws/defender/src/private;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/lwip/src/include;../../../../../libraries/3rdparty/lwip/src/include/lwip;../../../../../libraries/3rdparty/lwip/src/portable;../../../../../libraries/3rdparty/unity/src;../../../../../libraries/3rdparty/unity/extras/fixture/src;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn</IncludePath>
 						</VariousControls>
 					</Cads>
 					<Aads>
diff --git a/projects/microchip/curiosity_pic32mzef/mplab/aws_demos/nbproject/configurations.xml b/projects/microchip/curiosity_pic32mzef/mplab/aws_demos/nbproject/configurations.xml
index caa50fc83..7eba89685 100644
--- a/projects/microchip/curiosity_pic32mzef/mplab/aws_demos/nbproject/configurations.xml
+++ b/projects/microchip/curiosity_pic32mzef/mplab/aws_demos/nbproject/configurations.xml
@@ -80,6 +80,8 @@
 			<logicalFolder name="https" displayName="https" projectFiles="true">
 				<itemPath>../../../../../demos/https/iot_demo_https_s3_download_sync.c</itemPath>
 				<itemPath>../../../../../demos/https/iot_demo_https_s3_download_async.c</itemPath>
+				<itemPath>../../../../../demos/https/iot_demo_https_s3_upload_sync.c</itemPath>
+				<itemPath>../../../../../demos/https/iot_demo_https_s3_upload_async.c</itemPath>
 				<itemPath>../../../../../demos/https/iot_demo_https_common.c</itemPath>
 			</logicalFolder>
 			<logicalFolder name="mqtt" displayName="mqtt" projectFiles="true">
diff --git a/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_demos/aws_demos.uvproj b/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_demos/aws_demos.uvproj
index b09bf98b6..5e5c8b78d 100644
--- a/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_demos/aws_demos.uvproj
+++ b/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_demos/aws_demos.uvproj
@@ -374,7 +374,7 @@
 							<MiscControls>--diag_suppress=550,177,C4017,111,2770,223</MiscControls>
 							<Define>RVDS_ARMCM4_NUC4xx __little_endian__=1 NDEBUG</Define>
 							<Undefine/>
-							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/nuvoton/sdk/CMSIS/Include;../../../../../vendors/nuvoton/sdk/Device/Nuvoton/numaker_iot_m487_wifi/Include;../../../../../vendors/nuvoton/sdk/middleware/wifi_esp8266;../../../../../vendors/nuvoton/sdk/StdDriver/inc;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/application_code/nuvoton_code;../../../../../demos/include;../../../../../demos/network_manager;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/wifi/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn;</IncludePath>
+							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/nuvoton/sdk/CMSIS/Include;../../../../../vendors/nuvoton/sdk/Device/Nuvoton/numaker_iot_m487_wifi/Include;../../../../../vendors/nuvoton/sdk/middleware/wifi_esp8266;../../../../../vendors/nuvoton/sdk/StdDriver/inc;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/application_code/nuvoton_code;../../../../../demos/include;../../../../../demos/network_manager;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/wifi/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn</IncludePath>
 						</VariousControls>
 					</Cads>
 					<Aads>
@@ -1368,6 +1368,16 @@
 							<FileType>1</FileType>
 							<FilePath>../../../../../demos/https/iot_demo_https_s3_download_async.c</FilePath>
 						</File>
+						<File>
+							<FileName>iot_demo_https_s3_upload_sync.c</FileName>
+							<FileType>1</FileType>
+							<FilePath>../../../../../demos/https/iot_demo_https_s3_upload_sync.c</FilePath>
+						</File>
+						<File>
+							<FileName>iot_demo_https_s3_upload_async.c</FileName>
+							<FileType>1</FileType>
+							<FilePath>../../../../../demos/https/iot_demo_https_s3_upload_async.c</FilePath>
+						</File>
 						<File>
 							<FileName>iot_demo_https_common.c</FileName>
 							<FileType>1</FileType>
diff --git a/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_tests/aws_tests.uvproj b/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_tests/aws_tests.uvproj
index 4af91aaa4..7874db987 100644
--- a/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_tests/aws_tests.uvproj
+++ b/projects/nuvoton/numaker_iot_m487_wifi/uvision/aws_tests/aws_tests.uvproj
@@ -374,7 +374,7 @@
 							<MiscControls>--diag_suppress=550,177,C4017,111,2770,223</MiscControls>
 							<Define>MBEDTLS_USER_CONFIG_FILE=\&quot;mbedtls_user_config.h\&quot; UNITY_INCLUDE_CONFIG_H RVDS_ARMCM4_NUC4xx __LITTLE_ENDIAN__ AMAZON_FREERTOS_ENABLE_UNIT_TESTS M487 __little_endian__=1 NDEBUG</Define>
 							<Undefine/>
-							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/nuvoton/sdk/CMSIS/Include;../../../../../vendors/nuvoton/sdk/Device/Nuvoton/numaker_iot_m487_wifi/Include;../../../../../vendors/nuvoton/sdk/middleware/wifi_esp8266;../../../../../vendors/nuvoton/sdk/StdDriver/inc;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_tests/config_files;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_tests/application_code/nuvoton_code;../../../../../tests/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/aws/ota/test;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/wifi/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/test/access;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/mqtt/src;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/aws/shadow/src;../../../../../libraries/c_sdk/standard/https/test/access;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/c_sdk/standard/https/src;../../../../../libraries/freertos_plus/aws/greengrass/test;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/freertos_plus/aws/greengrass/src;../../../../../libraries/c_sdk/aws/defender/src/private;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/3rdparty/unity/src;../../../../../libraries/3rdparty/unity/extras/fixture/src;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn;</IncludePath>
+							<IncludePath>../../../../../freertos_kernel/include;../../../../../freertos_kernel/portable/RVDS/ARM_CM4F;../../../../../vendors/nuvoton/sdk/CMSIS/Include;../../../../../vendors/nuvoton/sdk/Device/Nuvoton/numaker_iot_m487_wifi/Include;../../../../../vendors/nuvoton/sdk/middleware/wifi_esp8266;../../../../../vendors/nuvoton/sdk/StdDriver/inc;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_tests/config_files;../../../../../vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_tests/application_code/nuvoton_code;../../../../../tests/include;../../../../../libraries/c_sdk/standard/common/include/private;../../../../../libraries/c_sdk/standard/common/include;../../../../../libraries/abstractions/platform/include;../../../../../libraries/abstractions/platform/freertos/include;../../../../../libraries/abstractions/secure_sockets/include;../../../../../libraries/freertos_plus/standard/tls/include;../../../../../libraries/freertos_plus/standard/crypto/include;../../../../../libraries/freertos_plus/standard/pkcs11/include;../../../../../libraries/freertos_plus/aws/ota/test;../../../../../libraries/abstractions/pkcs11/include;../../../../../libraries/freertos_plus/standard/utils/include;../../../../../libraries/abstractions/wifi/include;../../../../../demos/dev_mode_key_provisioning/include;../../../../../libraries/c_sdk/aws/defender/include;../../../../../libraries/c_sdk/standard/mqtt/test/access;../../../../../libraries/c_sdk/standard/mqtt/include;../../../../../libraries/c_sdk/standard/mqtt/src;../../../../../libraries/c_sdk/standard/serializer/include;../../../../../libraries/c_sdk/aws/shadow/include;../../../../../libraries/c_sdk/aws/shadow/src;../../../../../libraries/c_sdk/standard/https/test/access;../../../../../libraries/c_sdk/standard/https/include;../../../../../libraries/c_sdk/standard/https/src;../../../../../libraries/freertos_plus/aws/greengrass/test;../../../../../libraries/freertos_plus/aws/greengrass/include;../../../../../libraries/freertos_plus/aws/greengrass/src;../../../../../libraries/c_sdk/aws/defender/src/private;../../../../../libraries/3rdparty/mbedtls/include;../../../../../libraries/3rdparty/mbedtls/include/mbedtls;../../../../../libraries/abstractions/pkcs11/mbedtls;../../../../../libraries/3rdparty/pkcs11;../../../../../libraries/3rdparty/unity/src;../../../../../libraries/3rdparty/unity/extras/fixture/src;../../../../../libraries/3rdparty/tinycbor;../../../../../libraries/3rdparty/http-parser;../../../../../libraries/3rdparty/jsmn</IncludePath>
 						</VariousControls>
 					</Cads>
 					<Aads>
diff --git a/projects/nxp/lpc54018iotmodule/iar/aws_demos/aws_demos.ewp b/projects/nxp/lpc54018iotmodule/iar/aws_demos/aws_demos.ewp
index ebc2c8a3b..d9e787298 100644
--- a/projects/nxp/lpc54018iotmodule/iar/aws_demos/aws_demos.ewp
+++ b/projects/nxp/lpc54018iotmodule/iar/aws_demos/aws_demos.ewp
@@ -1966,6 +1966,12 @@
 			<file>
 				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_download_async.c</name>
 			</file>
+			<file>
+				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_upload_sync.c</name>
+			</file>
+			<file>
+				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_upload_async.c</name>
+			</file>
 			<file>
 				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_common.c</name>
 			</file>
diff --git a/projects/nxp/lpc54018iotmodule/mcuxpresso/aws_demos/.project b/projects/nxp/lpc54018iotmodule/mcuxpresso/aws_demos/.project
index 3e07f911e..70e5b3c75 100644
--- a/projects/nxp/lpc54018iotmodule/mcuxpresso/aws_demos/.project
+++ b/projects/nxp/lpc54018iotmodule/mcuxpresso/aws_demos/.project
@@ -1392,6 +1392,16 @@
 			<type>1</type>
 			<locationURI>BASE_DIR/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>BASE_DIR/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>BASE_DIR/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj b/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj
index fd06a5dc3..b4734bcff 100644
--- a/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj
+++ b/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj
@@ -38,7 +38,7 @@
 		</Midl>
 		<ClCompile>
 			<Optimization>Disabled</Optimization>
-			<AdditionalIncludeDirectories>..\..\..\..\..\freertos_kernel\include;..\..\..\..\..\freertos_kernel\portable\MSVC-MingW;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\config_files;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code;..\..\..\..\..\demos\include;..\..\..\..\..\demos\network_manager;..\..\..\..\..\libraries\c_sdk\standard\common\include\private;..\..\..\..\..\libraries\c_sdk\standard\common\include;..\..\..\..\..\libraries\abstractions\platform\include;..\..\..\..\..\libraries\abstractions\platform\freertos\include;..\..\..\..\..\libraries\abstractions\secure_sockets\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\test;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\source\portable\Compiler\MSVC;..\..\..\..\..\libraries\freertos_plus\standard\tls\include;..\..\..\..\..\libraries\freertos_plus\standard\crypto\include;..\..\..\..\..\libraries\freertos_plus\standard\pkcs11\include;..\..\..\..\..\libraries\abstractions\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\standard\utils\include;..\..\..\..\..\demos\dev_mode_key_provisioning\include;..\..\..\..\..\libraries\c_sdk\aws\defender\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\include;..\..\..\..\..\libraries\c_sdk\standard\serializer\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\include;..\..\..\..\..\libraries\c_sdk\standard\https\include;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\include;..\..\..\..\..\libraries\freertos_plus\aws\ota\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\include;..\..\..\..\..\libraries\3rdparty\mbedtls\include;..\..\..\..\..\libraries\abstractions\posix\include;..\..\..\..\..\vendors\pc\boards\windows\ports\posix;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_posix\include;..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\Include;..\..\..\..\..\libraries\3rdparty\win_pcap;..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls;..\..\..\..\..\libraries\abstractions\pkcs11\mbedtls;..\..\..\..\..\libraries\3rdparty\pkcs11;..\..\..\..\..\libraries\3rdparty\tinycbor;..\..\..\..\..\libraries\3rdparty\http-parser;..\..\..\..\..\libraries\3rdparty\jsmn;</AdditionalIncludeDirectories>
+			<AdditionalIncludeDirectories>..\..\..\..\..\freertos_kernel\include;..\..\..\..\..\freertos_kernel\portable\MSVC-MingW;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\config_files;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code;..\..\..\..\..\demos\include;..\..\..\..\..\demos\network_manager;..\..\..\..\..\libraries\c_sdk\standard\common\include\private;..\..\..\..\..\libraries\c_sdk\standard\common\include;..\..\..\..\..\libraries\abstractions\platform\include;..\..\..\..\..\libraries\abstractions\platform\freertos\include;..\..\..\..\..\libraries\abstractions\secure_sockets\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\test;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\source\portable\Compiler\MSVC;..\..\..\..\..\libraries\freertos_plus\standard\tls\include;..\..\..\..\..\libraries\freertos_plus\standard\crypto\include;..\..\..\..\..\libraries\freertos_plus\standard\pkcs11\include;..\..\..\..\..\libraries\abstractions\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\standard\utils\include;..\..\..\..\..\demos\dev_mode_key_provisioning\include;..\..\..\..\..\libraries\c_sdk\aws\defender\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\include;..\..\..\..\..\libraries\c_sdk\standard\serializer\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\include;..\..\..\..\..\libraries\c_sdk\standard\https\include;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\include;..\..\..\..\..\libraries\freertos_plus\aws\ota\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\include;..\..\..\..\..\libraries\3rdparty\mbedtls\include;..\..\..\..\..\libraries\abstractions\posix\include;..\..\..\..\..\vendors\pc\boards\windows\ports\posix;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_posix\include;..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\Include;..\..\..\..\..\libraries\3rdparty\win_pcap;..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls;..\..\..\..\..\libraries\abstractions\pkcs11\mbedtls;..\..\..\..\..\libraries\3rdparty\pkcs11;..\..\..\..\..\libraries\3rdparty\tinycbor;..\..\..\..\..\libraries\3rdparty\http-parser;..\..\..\..\..\libraries\3rdparty\jsmn</AdditionalIncludeDirectories>
 			<PreprocessorDefinitions>WIN32;_DEBUG;__free_rtos__;_CONSOLE;_WIN32_WINNT=0x0500;WINVER=0x400;_CRT_SECURE_NO_WARNINGS;__PRETTY_FUNCTION__=__FUNCTION__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
 			<MinimalRebuild/>
 			<BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
@@ -356,6 +356,8 @@
 		<ClCompile Include="..\..\..\..\..\demos\greengrass_connectivity\aws_greengrass_discovery_demo.c"/>
 		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_download_sync.c"/>
 		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_download_async.c"/>
+		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_upload_sync.c"/>
+		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_upload_async.c"/>
 		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_common.c"/>
 		<ClCompile Include="..\..\..\..\..\demos\mqtt\iot_demo_mqtt.c"/>
 		<ClCompile Include="..\..\..\..\..\demos\ota\aws_iot_ota_update_demo.c"/>
diff --git a/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj.filters b/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj.filters
index ad91d39fb..3887df134 100644
--- a/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj.filters
+++ b/projects/pc/windows/visual_studio/aws_demos/aws_demos.vcxproj.filters
@@ -105,8 +105,7 @@
 		<Filter Include="demos\ota"/>
 		<Filter Include="demos\shadow"/>
 		<Filter Include="demos\tcp"/>
-		<Filter Include="vendors\pc\boards\windows\aws_demos\application_code"/>
-		<Filter Include="vendors\pc\boards\windows\aws_demos"/>
+		<Filter Include="application_code"/>
 		<Filter Include="libraries\3rdparty\tracealyzer_recorder"/>
 		<Filter Include="libraries\3rdparty\mbedtls\utils"/>
 		<Filter Include="libraries\3rdparty\mbedtls\include\mbedtls"/>
@@ -424,7 +423,7 @@
 			<Filter>demos\tcp</Filter>
 		</ClInclude>
 		<ClInclude Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_demo_logging.h">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClInclude>
 		<ClInclude Include="..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls\aes.h">
 			<Filter>libraries\3rdparty\mbedtls\include\mbedtls</Filter>
@@ -932,6 +931,12 @@
 		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_download_async.c">
 			<Filter>demos\https</Filter>
 		</ClCompile>
+		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_upload_sync.c">
+			<Filter>demos\https</Filter>
+		</ClCompile>
+		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_s3_upload_async.c">
+			<Filter>demos\https</Filter>
+		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\demos\https\iot_demo_https_common.c">
 			<Filter>demos\https</Filter>
 		</ClCompile>
@@ -948,16 +953,16 @@
 			<Filter>demos\tcp</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\main.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_demo_logging.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_entropy_hardware_poll.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_run-time-stats-utils.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\trcKernelPort.c">
 			<Filter>libraries\3rdparty\tracealyzer_recorder</Filter>
diff --git a/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj b/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj
index a97619b32..64424fb4b 100644
--- a/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj
+++ b/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj
@@ -55,7 +55,7 @@
 			<Optimization>Disabled</Optimization>
 			<PreprocessorDefinitions>WIN32;UNIT_TESTS;_CRT_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;UNITY_INCLUDE_CONFIG_H;AMAZON_FREERTOS_ENABLE_UNIT_TESTS;__free_rtos__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
 			<AdditionalUsingDirectories/>
-			<AdditionalIncludeDirectories>..\..\..\..\..\freertos_kernel\include;..\..\..\..\..\freertos_kernel\portable\MSVC-MingW;..\..\..\..\..\vendors\pc\boards\windows\aws_tests\config_files;..\..\..\..\..\vendors\pc\boards\windows\aws_tests\application_code;..\..\..\..\..\tests\include;..\..\..\..\..\libraries\c_sdk\standard\common\include\private;..\..\..\..\..\libraries\c_sdk\standard\common\include;..\..\..\..\..\libraries\abstractions\platform\include;..\..\..\..\..\libraries\abstractions\platform\freertos\include;..\..\..\..\..\libraries\abstractions\secure_sockets\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\test;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\source\portable\Compiler\MSVC;..\..\..\..\..\libraries\freertos_plus\standard\tls\include;..\..\..\..\..\libraries\freertos_plus\standard\crypto\include;..\..\..\..\..\libraries\freertos_plus\standard\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\aws\ota\test;..\..\..\..\..\libraries\abstractions\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\standard\utils\include;..\..\..\..\..\demos\dev_mode_key_provisioning\include;..\..\..\..\..\libraries\c_sdk\aws\defender\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\test\access;..\..\..\..\..\libraries\c_sdk\standard\mqtt\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\src;..\..\..\..\..\libraries\c_sdk\standard\serializer\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\src;..\..\..\..\..\libraries\c_sdk\standard\https\test\access;..\..\..\..\..\libraries\c_sdk\standard\https\include;..\..\..\..\..\libraries\c_sdk\standard\https\src;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\test;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\include;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\include;..\..\..\..\..\libraries\3rdparty\mbedtls\include;..\..\..\..\..\libraries\abstractions\posix\include;..\..\..\..\..\vendors\pc\boards\windows\ports\posix;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_posix\include;..\..\..\..\..\libraries\c_sdk\aws\defender\src\private;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code;..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\Include;..\..\..\..\..\libraries\3rdparty\win_pcap;..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls;..\..\..\..\..\libraries\abstractions\pkcs11\mbedtls;..\..\..\..\..\libraries\3rdparty\pkcs11;..\..\..\..\..\libraries\3rdparty\unity\src;..\..\..\..\..\libraries\3rdparty\unity\extras\fixture\src;..\..\..\..\..\libraries\3rdparty\tinycbor;..\..\..\..\..\libraries\3rdparty\http-parser;..\..\..\..\..\libraries\3rdparty\jsmn;</AdditionalIncludeDirectories>
+			<AdditionalIncludeDirectories>..\..\..\..\..\freertos_kernel\include;..\..\..\..\..\freertos_kernel\portable\MSVC-MingW;..\..\..\..\..\vendors\pc\boards\windows\aws_tests\config_files;..\..\..\..\..\vendors\pc\boards\windows\aws_tests\application_code;..\..\..\..\..\tests\include;..\..\..\..\..\libraries\c_sdk\standard\common\include\private;..\..\..\..\..\libraries\c_sdk\standard\common\include;..\..\..\..\..\libraries\abstractions\platform\include;..\..\..\..\..\libraries\abstractions\platform\freertos\include;..\..\..\..\..\libraries\abstractions\secure_sockets\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\test;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\include;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_tcp\source\portable\Compiler\MSVC;..\..\..\..\..\libraries\freertos_plus\standard\tls\include;..\..\..\..\..\libraries\freertos_plus\standard\crypto\include;..\..\..\..\..\libraries\freertos_plus\standard\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\aws\ota\test;..\..\..\..\..\libraries\abstractions\pkcs11\include;..\..\..\..\..\libraries\freertos_plus\standard\utils\include;..\..\..\..\..\demos\dev_mode_key_provisioning\include;..\..\..\..\..\libraries\c_sdk\aws\defender\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\test\access;..\..\..\..\..\libraries\c_sdk\standard\mqtt\include;..\..\..\..\..\libraries\c_sdk\standard\mqtt\src;..\..\..\..\..\libraries\c_sdk\standard\serializer\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\include;..\..\..\..\..\libraries\c_sdk\aws\shadow\src;..\..\..\..\..\libraries\c_sdk\standard\https\test\access;..\..\..\..\..\libraries\c_sdk\standard\https\include;..\..\..\..\..\libraries\c_sdk\standard\https\src;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\test;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\include;..\..\..\..\..\libraries\freertos_plus\aws\greengrass\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\src;..\..\..\..\..\libraries\freertos_plus\aws\ota\include;..\..\..\..\..\libraries\3rdparty\mbedtls\include;..\..\..\..\..\libraries\abstractions\posix\include;..\..\..\..\..\vendors\pc\boards\windows\ports\posix;..\..\..\..\..\libraries\freertos_plus\standard\freertos_plus_posix\include;..\..\..\..\..\libraries\c_sdk\aws\defender\src\private;..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code;..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\Include;..\..\..\..\..\libraries\3rdparty\win_pcap;..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls;..\..\..\..\..\libraries\abstractions\pkcs11\mbedtls;..\..\..\..\..\libraries\3rdparty\pkcs11;..\..\..\..\..\libraries\3rdparty\unity\src;..\..\..\..\..\libraries\3rdparty\unity\extras\fixture\src;..\..\..\..\..\libraries\3rdparty\tinycbor;..\..\..\..\..\libraries\3rdparty\http-parser;..\..\..\..\..\libraries\3rdparty\jsmn</AdditionalIncludeDirectories>
 			<UndefinePreprocessorDefinitions/>
 			<RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
 			<MultiProcessorCompilation>true</MultiProcessorCompilation>
diff --git a/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj.filters b/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj.filters
index 9f9b6250d..4d3350325 100644
--- a/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj.filters
+++ b/projects/pc/windows/visual_studio/aws_tests/aws_tests.vcxproj.filters
@@ -119,10 +119,7 @@
 		<Filter Include="libraries\abstractions\pkcs11\test"/>
 		<Filter Include="libraries\abstractions\platform\test"/>
 		<Filter Include="libraries\abstractions\secure_sockets\test"/>
-		<Filter Include="vendors\pc\boards\windows\aws_tests\application_code"/>
-		<Filter Include="vendors\pc\boards\windows\aws_tests"/>
-		<Filter Include="vendors\pc\boards\windows\aws_demos\application_code"/>
-		<Filter Include="vendors\pc\boards\windows\aws_demos"/>
+		<Filter Include="application_code"/>
 		<Filter Include="libraries\3rdparty\tracealyzer_recorder"/>
 		<Filter Include="libraries\3rdparty\mbedtls\utils"/>
 		<Filter Include="libraries\3rdparty\mbedtls\include\mbedtls"/>
@@ -439,7 +436,7 @@
 			<Filter>libraries\freertos_plus\standard\freertos_plus_posix\include</Filter>
 		</ClInclude>
 		<ClInclude Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_demo_logging.h">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClInclude>
 		<ClInclude Include="..\..\..\..\..\libraries\3rdparty\mbedtls\include\mbedtls\aes.h">
 			<Filter>libraries\3rdparty\mbedtls\include\mbedtls</Filter>
@@ -1074,16 +1071,16 @@
 			<Filter>libraries\abstractions\secure_sockets\test</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_tests\application_code\main.c">
-			<Filter>vendors\pc\boards\windows\aws_tests\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_demo_logging.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_entropy_hardware_poll.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\vendors\pc\boards\windows\aws_demos\application_code\aws_run-time-stats-utils.c">
-			<Filter>vendors\pc\boards\windows\aws_demos\application_code</Filter>
+			<Filter>application_code</Filter>
 		</ClCompile>
 		<ClCompile Include="..\..\..\..\..\libraries\3rdparty\tracealyzer_recorder\trcKernelPort.c">
 			<Filter>libraries\3rdparty\tracealyzer_recorder</Filter>
diff --git a/projects/renesas/rx65n-rsk/e2studio/aws_demos/.project b/projects/renesas/rx65n-rsk/e2studio/aws_demos/.project
index 2eeca181a..6ea49d632 100644
--- a/projects/renesas/rx65n-rsk/e2studio/aws_demos/.project
+++ b/projects/renesas/rx65n-rsk/e2studio/aws_demos/.project
@@ -1531,6 +1531,16 @@
 			<type>1</type>
 			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/projects/st/stm32l475_discovery/ac6/aws_demos/.project b/projects/st/stm32l475_discovery/ac6/aws_demos/.project
index 5ffb62c7a..37d050fec 100644
--- a/projects/st/stm32l475_discovery/ac6/aws_demos/.project
+++ b/projects/st/stm32l475_discovery/ac6/aws_demos/.project
@@ -1672,6 +1672,16 @@
 			<type>1</type>
 			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>AWS_IOT_MCU_ROOT/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/projects/ti/cc3220_launchpad/ccs/aws_demos/.project b/projects/ti/cc3220_launchpad/ccs/aws_demos/.project
index 939e37406..57018e323 100644
--- a/projects/ti/cc3220_launchpad/ccs/aws_demos/.project
+++ b/projects/ti/cc3220_launchpad/ccs/aws_demos/.project
@@ -22,6 +22,11 @@
 		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
 	</natures>
 	<linkedResources>
+		<link>
+			<name>CC3220SF.ccxml</name>
+			<type>1</type>
+			<locationURI>PARENT-5-PROJECT_LOC/vendors/ti/boards/cc3220_launchpad/CC3220SF.ccxml</locationURI>
+		</link>
 		<link>
 			<name>freertos_kernel/event_groups.c</name>
 			<type>1</type>
@@ -902,6 +907,16 @@
 			<type>1</type>
 			<locationURI>BASE_DIR_ROOT/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>BASE_DIR_ROOT/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>BASE_DIR_ROOT/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/projects/ti/cc3220_launchpad/iar/aws_demos/aws_demos.ewp b/projects/ti/cc3220_launchpad/iar/aws_demos/aws_demos.ewp
index ee0406324..a515b7147 100644
--- a/projects/ti/cc3220_launchpad/iar/aws_demos/aws_demos.ewp
+++ b/projects/ti/cc3220_launchpad/iar/aws_demos/aws_demos.ewp
@@ -2476,6 +2476,12 @@
 			<file>
 				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_download_async.c</name>
 			</file>
+			<file>
+				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_upload_sync.c</name>
+			</file>
+			<file>
+				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_s3_upload_async.c</name>
+			</file>
 			<file>
 				<name>$PROJ_DIR$\..\..\..\..\..\demos\https\iot_demo_https_common.c</name>
 			</file>
diff --git a/projects/xilinx/microzed/xsdk/aws_demos/.project b/projects/xilinx/microzed/xsdk/aws_demos/.project
index f32b04100..632463039 100644
--- a/projects/xilinx/microzed/xsdk/aws_demos/.project
+++ b/projects/xilinx/microzed/xsdk/aws_demos/.project
@@ -822,6 +822,16 @@
 			<type>1</type>
 			<locationURI>AFR_ROOT/demos/https/iot_demo_https_s3_download_async.c</locationURI>
 		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_sync.c</name>
+			<type>1</type>
+			<locationURI>AFR_ROOT/demos/https/iot_demo_https_s3_upload_sync.c</locationURI>
+		</link>
+		<link>
+			<name>demos/https/iot_demo_https_s3_upload_async.c</name>
+			<type>1</type>
+			<locationURI>AFR_ROOT/demos/https/iot_demo_https_s3_upload_async.c</locationURI>
+		</link>
 		<link>
 			<name>demos/https/iot_demo_https_common.c</name>
 			<type>1</type>
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/IotHttpsClient_AddHeader_harness.c b/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/IotHttpsClient_AddHeader_harness.c
index 8e962576e..92ba921b5 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/IotHttpsClient_AddHeader_harness.c
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/IotHttpsClient_AddHeader_harness.c
@@ -47,8 +47,8 @@ void harness() {
     __CPROVER_assume(is_valid_IotRequestHandle(reqHandle));
   uint32_t nameLen;
   uint32_t valueLen;
-  __CPROVER_assume(nameLen < UINT32_MAX-1);
-  __CPROVER_assume(valueLen < UINT32_MAX-1);
+  __CPROVER_assume(nameLen < CBMC_MAX_OBJECT_SIZE);
+  __CPROVER_assume(valueLen < CBMC_MAX_OBJECT_SIZE);
   char * pName = safeMalloc(nameLen+1);
   char * pValue = safeMalloc(valueLen+1);
   if (pName)
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/Makefile.json
index 2fb6e8b9e..aaf2bc271 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_AddHeader/Makefile.json
@@ -5,6 +5,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -43,6 +48,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_Connect/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_Connect/Makefile.json
index a79dcffd1..026c9e024 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_Connect/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_Connect/Makefile.json
@@ -5,6 +5,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -46,6 +51,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_Disconnect/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_Disconnect/Makefile.json
index e1ec255f1..8f403c062 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_Disconnect/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_Disconnect/Makefile.json
@@ -5,6 +5,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -46,6 +51,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadContentLength/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadContentLength/Makefile.json
index 05cd5d299..664cf9e90 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadContentLength/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadContentLength/Makefile.json
@@ -5,6 +5,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -38,6 +43,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadHeader/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadHeader/Makefile.json
index f16303cec..62be3d5c7 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadHeader/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadHeader/Makefile.json
@@ -10,6 +10,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -45,7 +50,9 @@
   "DEF":
   [
     "USER_DATA_SIZE={USER_DATA_SIZE}",
-    "MAX_ACCEPTED_SIZE={MAX_ACCEPTED_SIZE}"
+    "MAX_ACCEPTED_SIZE={MAX_ACCEPTED_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
 
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadResponseStatus/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadResponseStatus/Makefile.json
index 93a014309..ee8c8f1f3 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadResponseStatus/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_ReadResponseStatus/Makefile.json
@@ -1,10 +1,15 @@
 {
   "ENTRY": "IotHttpsClient_ReadResponseStatus",
-  
+
   # This is the length of the user data after the header in a buffer.
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -38,6 +43,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/IotHttpsClient_SendSync/Makefile.json b/tools/cbmc/proofs/HTTP/IotHttpsClient_SendSync/Makefile.json
index 8b2b97546..03b8b7e01 100644
--- a/tools/cbmc/proofs/HTTP/IotHttpsClient_SendSync/Makefile.json
+++ b/tools/cbmc/proofs/HTTP/IotHttpsClient_SendSync/Makefile.json
@@ -5,6 +5,11 @@
   # This can be set to any size.
   "USER_DATA_SIZE": "1000",
 
+  # A CBMC pointer is an object id followed by an offest into the object.
+  # The size of the offset is limited by the size of the object id.
+  "CBMC_OBJECTID_BITS": "7",
+  "CBMC_MAX_OBJECT_SIZE": "\"(UINT32_MAX>>CBMC_OBJECTID_BITS)\"",
+
   "CBMCFLAGS":
   [
     "--unwind 1",
@@ -45,6 +50,8 @@
   ],
   "DEF":
   [
-    "USER_DATA_SIZE={USER_DATA_SIZE}"
+    "USER_DATA_SIZE={USER_DATA_SIZE}",
+    "CBMC_OBJECTID_BITS={CBMC_OBJECTID_BITS}",
+    "CBMC_MAX_OBJECT_SIZE={CBMC_MAX_OBJECT_SIZE}"
   ]
 }
diff --git a/tools/cbmc/proofs/HTTP/global_state_HTTP.c b/tools/cbmc/proofs/HTTP/global_state_HTTP.c
index 0b01415f5..9d5c52290 100644
--- a/tools/cbmc/proofs/HTTP/global_state_HTTP.c
+++ b/tools/cbmc/proofs/HTTP/global_state_HTTP.c
@@ -407,5 +407,7 @@ IotHttpsResponseInfo_t * allocate_IotResponseInfo() {
 int is_valid_IotResponseInfo(IotHttpsResponseInfo_t * pRespInfo){
   return
     pRespInfo->pSyncInfo &&
-    pRespInfo->pSyncInfo->pBody;
+    pRespInfo->pSyncInfo->pBody &&
+    pRespInfo->pSyncInfo->bodyLen <= CBMC_MAX_OBJECT_SIZE &&
+    pRespInfo->userBuffer.bufferLen <= CBMC_MAX_OBJECT_SIZE;
 }
diff --git a/tools/certificate_configuration/PEMfileToCString.html b/tools/certificate_configuration/PEMfileToCString.html
index 9fd44701c..0733d0314 100644
--- a/tools/certificate_configuration/PEMfileToCString.html
+++ b/tools/certificate_configuration/PEMfileToCString.html
@@ -24,11 +24,11 @@
             // Replace any CR/LF pairs with a newline character.
             credentialText = credentialText.replace(/\r\n/g, "\n");
 
-            // Add line endings & html line break for C-language variable declaration.
-            credentialText = credentialText.replace(/\n/g, "\\n\"<br>\n\"");
+            // Add line endings, string quote, and line continuation, as well as html line breaks. (\n"\ <break>)
+            credentialText = credentialText.replace(/\n/g, "\\n\"\\<br>\n\"");
 
-            // Format the end of the last line with " and semicolon.
-            credentialText = credentialText + "\";\n";
+            // Format the end of the last line with " (but no line continuation).
+            credentialText = credentialText + "\"\n";
 
             return credentialText;
         }
diff --git a/tools/cmake/afr_module.cmake b/tools/cmake/afr_module.cmake
index a325cd4ee..744598cc3 100644
--- a/tools/cmake/afr_module.cmake
+++ b/tools/cmake/afr_module.cmake
@@ -15,7 +15,6 @@ endforeach()
 set(AFR_MODULES                 "" CACHE INTERNAL "List of Amazon FreeRTOS modules.")
 set(AFR_MODULES_PORT            "" CACHE INTERNAL "List of porting layer targets defined from vendors.")
 set(AFR_MODULES_PUBLIC          "" CACHE INTERNAL "List of public Amazon FreeRTOS modules.")
-set(AFR_MODULES_PUBLIC_DISABLED "" CACHE INTERNAL "List of public Amazon FreeRTOS modules explicitly disabled for a board.")
 set(AFR_MODULES_BUILD           "" CACHE INTERNAL "List of Amazon FreeRTOS modules to build.")
 set(AFR_MODULES_ENABLED         "" CACHE INTERNAL "List of enabled Amazon FreeRTOS modules.")
 set(AFR_MODULES_ENABLED_USER    "" CACHE INTERNAL "List of Amazon FreeRTOS modules enabled by user.")
@@ -58,10 +57,7 @@ function(afr_module)
     endif()
 
     if(NOT (ARG_INTERNAL OR ARG_INTERFACE))
-        # Do not append if the module is explicitly disabled for the board.
-        if(NOT ${module_name} IN_LIST AFR_MODULES_PUBLIC_DISABLED)
-            afr_cache_append(AFR_MODULES_PUBLIC ${module_name})
-        endif()
+        afr_cache_append(AFR_MODULES_PUBLIC ${module_name})
     endif()
 
     # All modules implicitly depends on kernel unless INTERFACE or KERNEL is provided.
@@ -139,12 +135,6 @@ function(afr_3rdparty_module arg_name)
     add_library(3rdparty::${arg_name} INTERFACE IMPORTED GLOBAL)
 endfunction()
 
-# Disable a list of public modules. This can be used to disable public modules
-# for a specific board.
-function(afr_disable_public_modules)
-    afr_cache_append(AFR_MODULES_PUBLIC_DISABLED ${ARGN})
-endfunction()
-
 # Add properties to a module, will set these global variables accordingly:
 # AFR_MODULE_${arg_module}_${arg_prop_type}_PRIVATE
 # AFR_MODULE_${arg_module}_${arg_prop_type}_PUBLIC
diff --git a/vendors/cypress/WICED_SDK/apps/demo/aws_demo/aws_demo.mk b/vendors/cypress/WICED_SDK/apps/demo/aws_demo/aws_demo.mk
index 94d9b7999..b0c068e4f 100644
--- a/vendors/cypress/WICED_SDK/apps/demo/aws_demo/aws_demo.mk
+++ b/vendors/cypress/WICED_SDK/apps/demo/aws_demo/aws_demo.mk
@@ -105,6 +105,8 @@ $(NAME)_SOURCES    := $(AMAZON_FREERTOS_PATH)vendors/cypress/boards/$(PLATFORM)/
                       $(AMAZON_FREERTOS_PATH)demos/https/iot_demo_https_common.c \
                       $(AMAZON_FREERTOS_PATH)demos/https/iot_demo_https_s3_download_async.c \
                       $(AMAZON_FREERTOS_PATH)demos/https/iot_demo_https_s3_download_sync.c \
+                      $(AMAZON_FREERTOS_PATH)demos/https/iot_demo_https_s3_upload_async.c \
+                      $(AMAZON_FREERTOS_PATH)demos/https/iot_demo_https_s3_upload_sync.c \
                       $(AFR_C_SDK_STANDARD_PATH)common/taskpool/iot_taskpool.c \
                       $(AFR_ABSTRACTIONS_PATH)platform/freertos/iot_clock_freertos.c \
                       $(AFR_ABSTRACTIONS_PATH)platform/freertos/iot_network_freertos.c \
diff --git a/vendors/cypress/boards/CYW943907AEVAL1F/aws_demos/config_files/aws_demo_config.h b/vendors/cypress/boards/CYW943907AEVAL1F/aws_demos/config_files/aws_demo_config.h
index 847016ff2..2e07b0506 100644
--- a/vendors/cypress/boards/CYW943907AEVAL1F/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/cypress/boards/CYW943907AEVAL1F/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/cypress/boards/CYW954907AEVAL1F/aws_demos/config_files/aws_demo_config.h b/vendors/cypress/boards/CYW954907AEVAL1F/aws_demos/config_files/aws_demo_config.h
index 847016ff2..2e07b0506 100644
--- a/vendors/cypress/boards/CYW954907AEVAL1F/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/cypress/boards/CYW954907AEVAL1F/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/espressif/boards/esp32/aws_demos/config_files/aws_demo_config.h b/vendors/espressif/boards/esp32/aws_demos/config_files/aws_demo_config.h
index b33c20438..98ad24bdd 100644
--- a/vendors/espressif/boards/esp32/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/espressif/boards/esp32/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_BLE_GATT_SERVER_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/infineon/boards/xmc4800_iotkit/aws_demos/config_files/aws_demo_config.h b/vendors/infineon/boards/xmc4800_iotkit/aws_demos/config_files/aws_demo_config.h
index 4d76dcdc1..530eb70dd 100644
--- a/vendors/infineon/boards/xmc4800_iotkit/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/infineon/boards/xmc4800_iotkit/aws_demos/config_files/aws_demo_config.h
@@ -37,6 +37,8 @@
  *          CONFIG_POSIX_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/marvell/boards/mw300_rd/aws_demos/config_files/aws_demo_config.h b/vendors/marvell/boards/mw300_rd/aws_demos/config_files/aws_demo_config.h
index 9da5675d8..308e4f0bb 100644
--- a/vendors/marvell/boards/mw300_rd/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/marvell/boards/mw300_rd/aws_demos/config_files/aws_demo_config.h
@@ -37,6 +37,8 @@
  *          CONFIG_POSIX_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files/aws_demo_config.h b/vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files/aws_demo_config.h
index 56572741a..da69cdfba 100644
--- a/vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/mediatek/boards/mt7697hx-dev-kit/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/microchip/boards/curiosity_pic32mzef/aws_demos/config_files/aws_demo_config.h b/vendors/microchip/boards/curiosity_pic32mzef/aws_demos/config_files/aws_demo_config.h
index 10c4c64ef..10b4424e7 100644
--- a/vendors/microchip/boards/curiosity_pic32mzef/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/microchip/boards/curiosity_pic32mzef/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/nordic/boards/nrf52840-dk/CMakeLists.txt b/vendors/nordic/boards/nrf52840-dk/CMakeLists.txt
index 5bef734d9..d7b7a972c 100644
--- a/vendors/nordic/boards/nrf52840-dk/CMakeLists.txt
+++ b/vendors/nordic/boards/nrf52840-dk/CMakeLists.txt
@@ -9,16 +9,13 @@ else()
 endif()
 
 
-set(AFR_MODULE_defender 0 CACHE INTERNAL "")
-
 # -------------------------------------------------------------------------------------------------
 # Amazon FreeRTOS disabled libraries
 # -------------------------------------------------------------------------------------------------
-
+set(AFR_MODULE_defender 0 CACHE INTERNAL "")
 # HTTPS is not supported for Nordic as this board does not have WiFi/Ethernet.
-afr_disable_public_modules(
-    https
-)
+set(AFR_MODULE_https 0 CACHE INTERNAL "")
+
 
 # -------------------------------------------------------------------------------------------------
 # Amazon FreeRTOS Console metadata
diff --git a/vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files/aws_demo_config.h b/vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files/aws_demo_config.h
index ca0762121..550b716cf 100644
--- a/vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/nuvoton/boards/numaker_iot_m487_wifi/aws_demos/config_files/aws_demo_config.h
@@ -37,6 +37,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/nxp/boards/lpc54018iotmodule/aws_demos/config_files/aws_demo_config.h b/vendors/nxp/boards/lpc54018iotmodule/aws_demos/config_files/aws_demo_config.h
index cd2672679..325a91711 100644
--- a/vendors/nxp/boards/lpc54018iotmodule/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/nxp/boards/lpc54018iotmodule/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/pc/boards/windows/aws_demos/config_files/aws_demo_config.h b/vendors/pc/boards/windows/aws_demos/config_files/aws_demo_config.h
index ae203e27b..61b7fe2e3 100644
--- a/vendors/pc/boards/windows/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/pc/boards/windows/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/renesas/boards/rx65n-rsk/aws_demos/config_files/aws_demo_config.h b/vendors/renesas/boards/rx65n-rsk/aws_demos/config_files/aws_demo_config.h
index 19c1a5d33..8e2fcd80a 100644
--- a/vendors/renesas/boards/rx65n-rsk/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/renesas/boards/rx65n-rsk/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/st/boards/stm32l475_discovery/aws_demos/config_files/aws_demo_config.h b/vendors/st/boards/stm32l475_discovery/aws_demos/config_files/aws_demo_config.h
index 997b63bf8..7befd5ce7 100644
--- a/vendors/st/boards/stm32l475_discovery/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/st/boards/stm32l475_discovery/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/ti/boards/cc3220_launchpad/CC3220SF.ccxml b/vendors/ti/boards/cc3220_launchpad/CC3220SF.ccxml
new file mode 100644
index 000000000..6d7faf2db
--- /dev/null
+++ b/vendors/ti/boards/cc3220_launchpad/CC3220SF.ccxml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<configurations XML_version="1.2" id="configurations_0">
+    <configuration XML_version="1.2" id="Texas Instruments XDS110 USB Debug Probe_0">
+        <instance XML_version="1.2" desc="Texas Instruments XDS110 USB Debug Probe_0" href="connections/TIXDS110_Connection.xml" id="Texas Instruments XDS110 USB Debug Probe_0" xml="TIXDS110_Connection.xml" xmlpath="connections"/>
+        <connection XML_version="1.2" id="Texas Instruments XDS110 USB Debug Probe_0">
+            <instance XML_version="1.2" href="drivers/tixds510cs_dap.xml" id="drivers" xml="tixds510cs_dap.xml" xmlpath="drivers"/>
+            <instance XML_version="1.2" href="drivers/tixds510cortexM.xml" id="drivers" xml="tixds510cortexM.xml" xmlpath="drivers"/>
+            <property Type="choicelist" Value="1" id="SWD Mode Settings"/>
+            <platform XML_version="1.2" id="platform_0">
+                <instance XML_version="1.2" desc="CC3220SF_SWD_0" href="devices/CC3220SF_SWD.xml" id="CC3220SF_SWD_0" xml="CC3220SF_SWD.xml" xmlpath="devices"/>
+            </platform>
+        </connection>
+    </configuration>
+</configurations>
diff --git a/vendors/ti/boards/cc3220_launchpad/aws_demos/config_files/aws_demo_config.h b/vendors/ti/boards/cc3220_launchpad/aws_demos/config_files/aws_demo_config.h
index ac99c4111..d2efc8b38 100644
--- a/vendors/ti/boards/cc3220_launchpad/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/ti/boards/cc3220_launchpad/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/vendor/boards/board/aws_demos/config_files/aws_demo_config.h b/vendors/vendor/boards/board/aws_demos/config_files/aws_demo_config.h
index fe407ba53..a97622d05 100644
--- a/vendors/vendor/boards/board/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/vendor/boards/board/aws_demos/config_files/aws_demo_config.h
@@ -41,6 +41,8 @@
  *          CONFIG_BLE_NUMERIC_COMPARISON_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
diff --git a/vendors/xilinx/boards/microzed/aws_demos/config_files/aws_demo_config.h b/vendors/xilinx/boards/microzed/aws_demos/config_files/aws_demo_config.h
index fb47cb52a..03ff4c7a3 100644
--- a/vendors/xilinx/boards/microzed/aws_demos/config_files/aws_demo_config.h
+++ b/vendors/xilinx/boards/microzed/aws_demos/config_files/aws_demo_config.h
@@ -38,6 +38,8 @@
  *          CONFIG_OTA_UPDATE_DEMO_ENABLED
  *          CONFIG_HTTPS_SYNC_DOWNLOAD_DEMO_ENABLED
  *          CONFIG_HTTPS_ASYNC_DOWNLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_SYNC_UPLOAD_DEMO_ENABLED
+ *          CONFIG_HTTPS_ASYNC_UPLOAD_DEMO_ENABLED
  *
  *  These defines are used in iot_demo_runner.h for demo selection */
 
