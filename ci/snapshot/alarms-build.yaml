# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09

Parameters:

  SIMAddress:
    Type: String

  NotificationAddress:
    Type: String

  BuildBatchPipeline:
    Type: String

  BuildViewerPipeline:
    Type: String

  BuildDockerPipeline:
    Type: String

  BuildCBMCLinuxPipeline:
    Type: String

Resources:

################################################################
# SES: Simple Email Service
################################################################

# TODO: The SESLambdaRole and SESLambda are identical in
# alarms-build and alarms-prod and could be included from
# a shared template stored on S3.

################################################################
# SES lambda

  BuildSESLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "ses-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - ses:SendEmail
                Effect: Allow
                Resource: "*"

  BuildSESLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt BuildSESLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os
          import traceback

          SENDER = '${NotificationAddress}'
          TO = '${SIMAddress}'

          def lambda_handler(event, context):
            ses = boto3.client('ses', region_name=os.environ['AWS_REGION'])
            try:
              subject = event['Records'][0]['Sns']['Subject']
              if not subject:
                subject = 'Pipeline error in ${AWS::AccountId}'
              message = json.loads(event['Records'][0]['Sns']['Message'])
              body = json.dumps(message, sort_keys=True, indent=2)
              ses.send_email(
                Source=SENDER,
                Destination={'ToAddresses': [TO]},
                Message={
                  'Subject': {'Data': 'Build tools account ' + subject},
                  'Body': {
                    'Text': {'Data': body},
                    'Html': {
                      'Data': '<html><head></head><body>{}</body></html>'.format(
                        body.replace('\n', '<br>'))
                    }
                  }
                })

            except Exception as e:
              traceback.print_exc()
              print 'Error: ' + str(e)
              print 'Event: ' + str(event)
              ses.send_email(
                Source=SENDER,
                Destination={'ToAddresses': [TO]},
                Message={
                  'Subject': {'Data': 'SES Lambda ${AWS::AccountId} failed'},
                  'Body': {
                    'Text': {'Data': str(e)},


                    'Html': {
                      'Data': '<html><head></head><body>{}</body></html>'.format(e)
                    }
                  }
                })



  SnsInfrastructureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CBMC Continuous Integration Infrastructure"
      TopicName: "cbmc-batch-verification-infrastructure"

  InfrastructureEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SnsInfrastructureTopic
      Topics:
        - !Ref SnsInfrastructureTopic

  SnsInfrastructureSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt BuildSESLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SnsInfrastructureTopic

  SnsInfrastructureSESLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsInfrastructureTopic
      FunctionName: !GetAtt BuildSESLambda.Arn

################################################################
# Driving event rule

  InfrastructureEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CodePipeline failure rule"
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Action Execution State Change"
        detail:
          state:
            - FAILED
          pipeline:
            - !Ref BuildBatchPipeline
            - !Ref BuildViewerPipeline
            - !Ref BuildDockerPipeline
            - !Ref BuildCBMCLinuxPipeline
      State: ENABLED
      Targets:
        - Arn: !Ref SnsInfrastructureTopic
          Id: "InfrastructurePipelineTopic"
          InputTransformer:
            InputTemplate: !Sub '"The pipeline <pipeline> <state> at stage <stage> to perform <action>. The full CodePipeline event received is <blob>. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/"'
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              state: "$.detail.state"
              stage: "$.detail.stage"
              action: "$.detail.action"
              blob: "$.detail"
