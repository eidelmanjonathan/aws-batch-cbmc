#!/usr/bin/env python3

# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#pylint: disable=missing-docstring

import logging
import argparse
import subprocess

# This is a general purpose tool for deploying and updating Padstone CI accounts. It can be used to set up
# both build accounts, which build Padstone tools and host snapshots, as well as proof accounts that run the proofs
################################################################
# Argument parsing
import time

import boto3
import botocore_amazon.monkeypatch

import snapshott


def create_parser():
    arg = argparse.ArgumentParser(description="""
    Update an account: either update beta or promote beta to prod.
    """)

    arg.add_argument('--profile',
                     metavar='PROFILE',
                     help='The AWS account profile (the default for beta, prod, build).'
                    )
    arg.add_argument('--cloudfront-profile',
                     metavar='PROFILE',
                     help='Cloudfront needs to be in us-east-1')
    arg.add_argument('--proof-account-ids',
                     metavar='ID',
                     nargs="+",
                     help="The account IDs that we need to grant read access to the build tools account")
    arg.add_argument('--beta-profile',
                     metavar='PROFILE',
                     help='The AWS account profile for the beta account.'
                    )
    arg.add_argument('--prod-profile',
                     metavar='PROFILE',
                     help='The AWS account profile for the prod account.'
                    )
    arg.add_argument('--build-profile',
                     metavar='PROFILE',
                     help="""
                     The AWS account profile for the build account
                     (defaults to prod account)."""
                    )
    arg.add_argument('--is-prod',
                     action='store_true',
                     help='Updating a production account.'
                    )

    arg.add_argument('--is-init',
                     action='store_true',
                     help='Use flag if this is the first time deploying build account')


    arg.add_argument('--cbmc-sha',
                     metavar='SHA',
                     help='SHA of the CBMC commit to use.'
                    )
    arg.add_argument('--batch-sha',
                     metavar='SHA',
                     help='SHA of the CBMC Batch commit to use.'
                    )
    arg.add_argument('--viewer-sha',
                     metavar='SHA',
                     help='SHA of the CBMC Viewer commit to use.'
                    )

    arg.add_argument('--no-cbmc-update',
                     action='store_true',
                     help='Do not update the cbmc package.'
                    )
    arg.add_argument('--no-batch-update',
                     action='store_true',
                     help='Do not update the batch packages (including docker).'
                    )
    arg.add_argument('--no-viewer-update',
                     action='store_true',
                     help='Do not update the viewer package.'
                    )
    arg.add_argument('--no-docker-update',
                     action='store_true',
                     help='Do not update the docker image.'
                    )
    arg.add_argument('--only-batch-update',
                     action='store_true',
                     help='Update only the batch packages (but not docker).'
                    )


    arg.add_argument('--canary',
                     action='store_true',
                     help='Run canary to test update.'
                    )

    arg.add_argument('--verbose',
                     action='store_true',
                     help='Verbose output.'
                    )
    arg.add_argument('--debug',
                     action='store_true',
                     help='Debug output.'
                    )

    return arg

def parse_args():
    args = create_parser().parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    logging.info('Arguments: %s', args)

    return args

################################################################
#

def run(string):
    print('Running: {}'.format(string))
    result = subprocess.run(string.split(),
                            check=True, capture_output=True, text=True)
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(result.stderr)

    return result.stdout

def snapshot_propose_args(args):
    """Pass relevant arguments to snapshot-propose."""
    options = {
        '--profile': args.profile,
        '--beta-profile': args.beta_profile,
        '--prod-profile': args.prod_profile,
        '--build-profile': args.build_profile,
        '--cbmc-sha': args.cbmc_sha,
        '--batch-sha': args.batch_sha,
        '--viewer-sha': args.viewer_sha
    }
    booleans = {
        '--no-cbmc-update': args.no_cbmc_update,
        '--no-batch-update': args.no_batch_update,
        '--no-viewer-update': args.no_viewer_update,
        '--no-docker-update': args.no_docker_update,
        '--only-batch-update': args.only_batch_update,
        '--verbose': args.verbose,
        '--debug': args.debug
    }
    opts = []
    for opt, val in options.items():
        if val is not None:
            opts.extend([opt, val])
    for opt, val in booleans.items():
        if val:
            opts.append(opt)
    return opts

def write_snapshot_json(output):
    with open('snapshot.json', 'w') as jsn:
        jsn.write(output)

def parse_snapshot_id(output):
    sid = None
    for line in output.split('\n'):
        if line.startswith('Updating SnapshotID to '):
            sid = line[len('Updating SnapshotID to '):]
            break
    if sid is None:
        raise UserWarning("snapshot id is none")
    return sid

def is_pipeline_complete(pipeline_name, pipeline_client):
    pipeline_state = pipeline_client.get_pipeline_state(name=pipeline_name)
    return not any(state["latestExecution"]["status"] == "InProgress" for state in pipeline_state["stageStates"])


def wait_for_pipeline_completion(pipeline_name, pipeline_client):
    print("Waiting for build pipeline: {0}".format(pipeline_name))
    while not is_pipeline_complete(pipeline_name, pipeline_client):
        time.sleep(1)
    print("Done waiting for build pipeline: {0}".format(pipeline_name))

def get_cbmc_s3_bucket_name(s3_client):
    resp = s3_client.list_buckets()
    bucket_names = map(lambda b: b["Name"], resp["Buckets"])
    return next(filter(lambda n: "cbmc" in n, bucket_names))

def take_most_recent(objects):
    return sorted(objects, key = lambda o: o["LastModified"], reverse=True)[0]

def extract_snapshot_name_from_key(key_prefix, all_objects):
    matching_objs = filter(lambda o: key_prefix in o["Key"], all_objects)
    most_recent_key = take_most_recent(matching_objs)["Key"]
    return most_recent_key.replace(key_prefix, "")

def get_docker_image_suffix_from_ecr(ecr_client):
    return ecr_client.list_images(repositoryName="cbmc")["imageIds"][0]["imageTag"].replace("ubuntu16-gcc-", "")

def get_package_filenames_from_s3(s3_client, ecr_client):
    cbmc_bucket_name = get_cbmc_s3_bucket_name(s3_client)
    object_contents = s3_client.list_objects(Bucket=cbmc_bucket_name, Prefix="package/")["Contents"]
    batch_pkg = extract_snapshot_name_from_key("package/batch/" ,object_contents)
    cbmc_pkg = extract_snapshot_name_from_key("package/cbmc/" ,object_contents)
    lambda_pkg = extract_snapshot_name_from_key("package/lambda/" ,object_contents)
    viewer_pkg = extract_snapshot_name_from_key("package/viewer/" ,object_contents)
    template_pkg = extract_snapshot_name_from_key("package/template/" ,object_contents)
    return {
            "batch": batch_pkg,
            "cbmc": cbmc_pkg,
            "lambda": lambda_pkg,
            "viewer": viewer_pkg,
            "templates": template_pkg,
            "docker": get_docker_image_suffix_from_ecr(ecr_client)
        }

def update_and_write_snapshot(package_filenames, snapshot):
    snapshot.snapshot["batch"] = package_filenames.get("batch")
    snapshot.snapshot["cbmc"] = package_filenames.get("cbmc")
    snapshot.snapshot["lambda"] = package_filenames.get("lambda")
    snapshot.snapshot["viewer"] = package_filenames.get("viewer")
    snapshot.snapshot["docker"] = package_filenames.get("docker")
    snapshot.snapshot["templates"] = package_filenames.get("templates")
    snapshot.write("snapshot.json")
################################################################
#

def main():
    args = parse_args()
    profile = args.profile or args.prod_profile
    build_profile = args.build_profile

    # If we want to set up the shared build account for the first time
    if args.is_init:
        snapshot = snapshott.Snapshot(filename="snapshot.json")
        cmd = './snapshot-deploy --profile {} --doit --globals --snapshot snapshot.json'
        run(cmd.format(build_profile))
        cmd = './snapshot-deploy --profile {} --build --snapshot snapshot.json'
        run(cmd.format(build_profile))
        session = boto3.session.Session(profile_name=build_profile)
        pipeline_client = session.client("codepipeline")
        build_s3_client = session.client("s3")
        build_ecr_client = session.client("ecr")
        wait_for_pipeline_completion("Build-CBMC-Linux-Pipeline", pipeline_client)
        wait_for_pipeline_completion("Build-Docker-Pipeline", pipeline_client)
        wait_for_pipeline_completion("Build-Viewer-Pipeline", pipeline_client)
        wait_for_pipeline_completion("Build-Batch-Pipeline", pipeline_client)
        package_filenames = get_package_filenames_from_s3(build_s3_client, build_ecr_client)
        update_and_write_snapshot(package_filenames, snapshot)

    # Otherwise we should propose the most recent snapshot
    else:
        cmd = './snapshot-propose ' + " ".join(snapshot_propose_args(args))
        output = run(cmd)
        write_snapshot_json(output)



    cmd = './snapshot-create --profile {} --snapshot snapshot.json'
    output = run(cmd.format(build_profile))
    sid = parse_snapshot_id(output)

    cmd = './snapshot-deploy --profile {} --snapshotid {} --build'
    run(cmd.format(build_profile, sid))

    cmd = './snapshot-deploy --profile {} --s3-proofs --snapshotid {}'
    run(cmd.format(profile, sid))


    cmd = './snapshot-deploy --profile {} --cloudfront {} --snapshot snapshot-{}.json'
    run(cmd.format(profile, args.cloudfront_profile, sid))

    if args.proof_account_ids:
        cmd = './snapshot-deploy --profile {} --build-profile {} --snapshotid {} --prod --proof-account-ids {} --cloudfront {}'
        run(cmd.format(profile, build_profile, sid, " ".join(args.proof_account_ids), args.cloudfront_profile))
    else:
        cmd = './snapshot-deploy --profile {} --build-profile {} --snapshotid {} --prod --cloudfront {}'
        run(cmd.format(profile, build_profile, sid, args.cloudfront_profile))

    cmd = './snapshot-variable --profile {} --operational'
    run(cmd.format(profile))
    if args.is_prod:
        cmd = './snapshot-variable --profile {} --updating'
    else:
        cmd = './snapshot-variable --profile {} --not-updating'
    run(cmd.format(profile))
    cmd = './snapshot-variable --profile {} --show-status'
    run(cmd.format(profile))

    if args.canary:
        cmd = './snapshot-canary --profile {}'
        run(cmd.format(profile))

if __name__ == '__main__':
    main()
